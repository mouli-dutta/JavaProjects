package com.myjavaprojects.utility;

import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;

public class JavaProjects {
    private JavaProjects(){}

    @NotNull
    public static ArrayList<Parent> getJavaProjects() {
        ArrayList<Parent> list = new ArrayList<>();
        list.add(new Parent("Fundamentals", getFundamentals()));
        list.add(new Parent("Numbers", getNumbers()));
        list.add(new Parent("Mathematics", getMathematics()));
        list.add(new Parent("Sequences", getSequences()));
        list.add(new Parent("Regex", getRegex()));

        return list;
    }

    private static ArrayList<Child> getRegex() {
        ArrayList<Child> c = new ArrayList<>();
        c.add(new Child(
                "Check Number",
                "Write a regex that will return true if the given object is a Number, otherwise false.\n\nFor example 1234 is a valid number but 12a3 or a12 are not valid.",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter a string.\");\n            String input = sc.nextLine();\n            \n            boolean isNumber = input.matches(\"\\\\d+\"); // \\d means digits (Character in range 0-9), and + means 1 or more times. So \\d+ means match any digit for 1 or more times.\n            System.out.println(\"Is the given string a number ? \" + isNumber);\n\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e.getMessage());\n        }\n    }\n}",
                "Enter a string.\n123\nIs the given string a number ? true\n\nEnter a string.\n12dd16z\nIs the given string a number ? false"
        ));

        c.add(new Child(
                "Check Vowel",
                "Write a regex which will return true if given object is a single vowel (a, e, i, o, u), otherwise false.",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter a string.\");\n            String input = sc.nextLine();\n\n            boolean isVowel = input.toLowerCase() // case insensitive\n                                   .matches(\"[aeiou]\"); // To match a vowel we use Character range (square brackets) that contains all the vowels (e.g. [aeiou])\n            System.out.println(\"Is the given string a vowel ? \" + isVowel);\n\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e.getMessage());\n        }\n    }\n}",
                "Enter a string.\na\nIs the given string a vowel ? true\n\nEnter a string.\nlol\nIs the given string a vowel ? false\n"
        ));

        c.add(new Child(
                "Check Letter",
                "Write a regex which will return true if the given object is a single ASCII letter (case insensitive). otherwise false.",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter a string.\");\n            String input = sc.nextLine();\n\n            boolean isLetter = input.matches(\"\\\\p{L}\"); // \\p{L} matches a Unicode letter\n            System.out.println(\"Is the given string a single letter ? \" + isLetter);\n\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e.getMessage());\n        }\n    }\n}",
                "Enter a string.\nA\nIs the given string a single letter ? true\n\nEnter a string.\ng\nIs the given string a single letter ? true\n\nEnter a string.\navc5\nIs the given string a single letter ? false\n"
        ));

        c.add(new Child(
                "Check if all letters are in alphabetical order",
                "Write a regex that matches a string with lowercase characters in alphabetical order, including any number of spaces. Leading and trailing whitespaces are also allowed. An empty string should also match.\n\nFor example:\n\nRegex should match \"  a bcd  efg \" but should not match \"asd g u \"",
                "import java.util.Scanner;\nimport java.util.stream.IntStream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter your password.\");\n            String input = sc.nextLine();\n\n            System.out.println(\"Is the string in alphabetic order?\\n\" + isAlphabetic(input));\n\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e.getMessage());\n        }\n    }\n\n    private static boolean isAlphabetic(String input) {\n        String[] alphabets = IntStream.rangeClosed('a', 'z').mapToObj(Character::toString).toArray(String[]::new);\n\n        String pattern =    \" *\"                                    // matches zero or more spaces\n                          + String.join(\"* *\", alphabets)   // followed by zero or more `a` then matches zero or more spaces followed by zero or more `b` ...(continues the sequence) then matches zero or more spaces followed by `z`\n                          + \"* *\";                                  // matches `z` zero or more times followed by zero or more spaces\n\n        return input.toLowerCase().matches(pattern);\n    }\n}",
                "Enter your password.\n  a bcd  efg \nIs the string in alphabetic order?\ntrue\n\nEnter your password.\nasd g u \nIs the string in alphabetic order?\nfalse"
        ));

        c.add(new Child(
                "Find every third character in a word",
                "Find every 3rd character of a word without using any number in your program.\n\nFor example:\n\nILoveToCodeInJava => oToIa",
                "import java.util.Scanner;\nimport java.util.function.UnaryOperator;\nimport java.util.regex.MatchResult;\nimport java.util.stream.Collectors;\n\npublic class Regex {\n\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter a word.\");\n            String word = sc.next();\n\n            System.out.println(\"Every third character of the word :\\n\" + findThirdChar.apply(word));\n\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e);\n        }\n    }\n\n    private static final UnaryOperator<String> \n            findThirdChar = str ->\n                new Scanner(str)\n                .findAll(\"(\\\\w)(?<=\\\\G...)\") // captures a character followed by two characters\n                .map(MatchResult::group) // group the matched 3rd character\n                .collect(Collectors.joining()); // finally join all the matched character in a String\n}",
                "Enter a word.\nILoveToCodeInJava\n\nEvery third character of the word :\noToIa"
        ));

        c.add(new Child(
                "Name Initials",
                "Write a regex to find the initial letters of a name.\n\nFor example:\nStephen William Hawking should return SH.",
                "import java.util.Scanner;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\npublic class NameInitial {\n\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter your name.\");\n            String inputStr = sc.nextLine();\n\n            String initials = nameInitial(inputStr);\n            System.out.println(\"Your name initials are \" + initials);\n\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e);\n        }\n    }\n\n    private static String nameInitial(String str) {\n        return\n                Pattern.compile(\"(.).*\\\\s(.).*\")\n                     /*\n                       the first capturing group (.) matches the first character of the first word\n                       .* metacharacter consumes all the characters after the first character until a line break\n                       \\s consumes all whitespace characters\n                       the second (.) matches the first character of the last word\n                       then the .* metacharacter consumes all the characters after the first character until a line break */\n\n                       .matcher(str) // pass the input string to Matcher\n                       .results() // create a Stream of MatchResults\n                       .map(m -> m.group(1) + m.group(2)) // join the first and second capturing group\n                       .map(String::toUpperCase) // convert the string to uppercase\n                       .collect(Collectors.joining()); // finally join the string and return the result\n    }\n}",
                "Enter your name.\nStephen William Hawking\nYour name initials are SH"
        ));

        c.add(new Child(
                "Prime String",
                "Write a regex to check whether a string is Prime or not.\n\nA string is called Prime if it can't be constructed by concatenating more than one equal string.\n\nFor example:\n\n\"abac\" is prime but \"xyxy\" is not a prime as, xyxy = xy + xy",
                "import java.text.MessageFormat;\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter a string.\");\n            String input = sc.nextLine();\n\n            System.out.println(MessageFormat.format(\"{0} {1} a prime string.\", input, isPrimeString(input) ? \"is\" : \"is not\"));\n\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e.getMessage());\n        }\n    }\n\n    private static boolean isPrimeString(String input) {\n        return Pattern.compile(\"(\\\\p{ASCII}+)\\\\1+\")\n                      /*\n                            \\p{ASCII}   matches any ascii character\n                            +           matches the ascii character for one or more times\n                            \\1          matches the first capturing group in the matched expression\n                             +          looks for the capturing group for 1 or more times\n                             \n                             that is, the regex matches any string which can be composed by concatenating multiple equal strings\n                       */\n                      .matcher(input)\n                      .results()\n                      .noneMatch(s -> input.equals(s.group())); // if the matched group is not equal to the input string then its a Prime string.\n    }\n}",
                "Enter a string.\nhello\nhello is a prime string.\n\nEnter a string.\nababab\nababab is not a prime string.\n"
        ));

        c.add(new Child(
                "Replace occurrences of a word",
                "Write a regex to replace all occurrences of a given word with another word.",
                "import java.util.Scanner;\nimport java.util.regex.Pattern;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter a string.\");\n            String input = sc.nextLine();\n\n            System.out.println(\"Enter the word you want to replace in the above string.\");\n            String replace = sc.nextLine();\n\n            System.out.println(\"Enter the word you want to replace the above word with.\");\n            String replacement = sc.nextLine();\n            \n            /*  To find a particular word from the given input\n                specify that word within the word boundaries and\n                then use the replaceAll method to replace all occurrences of the matched word.\n             */\n            String modified = Pattern.compile(\"\\\\b\" + replace + \"\\\\b\", Pattern.CASE_INSENSITIVE)\n                                     .matcher(input)\n                                     .replaceAll(replacement);\n\n            System.out.println(\"Modified string is :\\n\" + modified);\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e.getMessage());\n        }\n    }\n}",
                "Enter a string.\n\nYes, I'm not a Tea person but I don't mind to make a tea for you or to have a Tea with you.\n\nEnter the word you want to replace in the above string.\n\ntea\n\nEnter the word you want to replace the above word with.\n\ncoffee\n\nModified string is :\n\nYes, I'm not a coffee person but I don't mind to make a coffee for you or to have a coffee with you."
        ));

        c.add(new Child(
                "Text Compression",
                "Write a Java code to compress an alphanumeric string given by the user.\n\nFor example :\n\nSuppose a string \"aaabbc\".\nNow count the occurrence of each letter in the string.\nSo the final string should be \"a3b2c\" as there are 3 'a', 2 'b' and only 1 'c'.",
                "import java.util.Scanner;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter a String.\");\n            String inputStr = sc.nextLine();\n\n            String compressed = textCompressor(inputStr);\n            System.out.println(\"The compressed string is \" + compressed);\n\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e);\n        }\n    }\n    private static String textCompressor(String str) {\n        return\n        // compile the regex\n        Pattern.compile(\"(\\\\p{ASCII})\\\\1*\")\n                /* \\p{ASCII} matches all ascii characters\n                   \\1* matches the capturing group for 0 or more times */\n\n               .matcher(str) // pass the string which needs to be matched\n               .results() // create a stream of MatchResults\n               .map( m ->\n                       m.group().length() == 1 ? // check if the matched group length is equal to 1\n                               m.group().substring(0, 1) // if true we need to only print the first character\n                       :\n                               m.group().substring(0, 1) + m.group().length()) // if the character appeared more than 1 time than print the first character and the number of times it occurred\n               .collect(Collectors.joining()); // finally join all the characters with their occurrences to a string\n    }\n}",
                "Enter a String.\naaaaabbbbrrrrrcggghh\nThe compressed string is a5b4r5cg3h2"
        ));

        c.add(new Child(
                "Validate PIN code",
                "A valid PIN code is either 4 digits or 6 digits and does not contain anything other than exactly 4 digits or 6 digits.\nWrite a Java code which will return true if the PIN code is valid else return false.",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter a string.\");\n            String input = sc.nextLine();\n\n            String pattern = \"\\\\d{4}\" + \"|\" + \"\\\\d{6}\";\n            /*\n            *   \\d   matches a digit (0-9)\n            *   {4}  that repeats 4 times\n            *    |    or\n            *   \\d   matches a digit (0-9)\n            *   {6}  that repeats 6 times\n            * */\n            boolean isValidPIN = input.matches(pattern); // \\p{L} matches a Unicode letter\n            System.out.println(\"Is valid PIN ? \" + isValidPIN);\n\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e.getMessage());\n        }\n    }\n}",
                "Enter a string.\n123456\nIs valid PIN ? true\n\nEnter a string.\n346d\nIs valid PIN ? false"
        ));

        c.add(new Child(
                "Validate Username",
                "Write a Java program to validate username.\nUsername can contain lowercase letters, numbers and underscore and length should be between 4 and 16 character (both inclusive)",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter username to check if its valid or not.\");\n            String input = sc.nextLine();\n\n            System.out.println(\"Is valid user name ? \" + isValidUserName(input));\n\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e.getMessage());\n        }\n    }\n\n    private static boolean isValidUserName(String time) {\n        String pattern = \"[\\\\p{Ll}\\\\d_]{4,16}\"; // use character range to match lowercase letters \\p{Ll}, digit \\d and underscore _ and check if the length is between 4-16 characters.\n        return time.matches(pattern);\n    }\n}",
                "Enter username to check if its valid or not.\nuser_42\nIs valid user name ? true\n\nEnter username to check if its valid or not.\ninvalid_user_name\nIs valid user name ? false"
        ));

        c.add(new Child(
                "Validate 24 hours time",
                "Write a regex which will validate 24 hours time string.\n\nFor example:\n\nAccepted : 01:00-1:00\n\nNot accepted : 24:00\n\nYou should also check for correct length and no spaces.",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter time to check if its in valid 24 hour format.\");\n            String input = sc.nextLine();\n\n            System.out.println(\"Is valid time? \" + isValidTime(input));\n\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e.getMessage());\n        }\n    }\n\n    private static boolean isValidTime(String time) {\n        String pattern =  \"(\"\n                             + \"[0-1]?\\\\d\"   // the first number (hours) is either a number between 0 and 19 [0-1]?\\\\d (allowing single digit number)\n                             + \"|\"           // or\n                             + \"2[0-3]\"      // a number between 20-23, 2[0-3]\n                        + \")\"\n                        + \":\"\n                        + \"[0-5]\\\\d\";       // the second number (minutes) is always a number between 00 and 59, [0-5]\\\\d (not allowing single digit number)\n\n        return time.matches(pattern);\n    }\n}",
                "Enter time to check if its in valid 24 hour format.\n14:20\nIs valid time? true\n\nEnter time to check if its in valid 24 hour format.\n25:02\nIs valid time? false"
        ));
        c.add(new Child(
                "Validate Password",
                "Write a regex that will validate a Password meeting the following requirements:\n- Between 8-20 characters\n- contains lowercase letters\n- contains uppercase letters\n- contains digits\n- contains special characters from !@#$%^&*?\n\nReturn Valid if passed, otherwise Invalid.",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter your password.\");\n            String input = sc.nextLine();\n\n            System.out.println(\"Password is \" + (isValidPassword(input) ? \"Valid.\" : \"Invalid.\"));\n\n        } catch (Exception e) {\n            System.out.println(\"Error!\" + e.getMessage());\n        }\n    }\n\n    private static boolean isValidPassword(String input) {\n        String pattern =   \"(?=.*[a-z])\"\n                         + \"(?=.*[A-Z])\"\n                         + \"(?=.*\\\\d)\"\n                         + \"(?=.*[!@#$%%^&*?])\"\n                         + \"[A-Za-z\\\\d!@#$%%^&*?]{8,20}\";\n\n            /*\n                  (?=Your_regex) is a Positive lookahead.\n                  It is a zero-width assertion meaning,\n                  it matches a location that is followed by the regex contained within `(?` and `)`.\n\n                  `.*`    matches any character for zero or more times\n\n                  so what the above regex is saying is :\n                      - match zero or more characters and then a Lowercase letter (but don't capture)\n                      - match zero or more character and then a Uppercase letter (but don't capture)\n                      - match zero or more character and then a digit (but don't capture)\n                      - match zero or more characters and the a special character (but don't capture)\n                      - the character range which contains all the required matches must be between 8 - 20 characters long\n             */\n\n        return input.matches(pattern);\n    }\n}",
                "Enter your password.\nHello$World42^\nPassword is Valid.\n\nEnter your password.\nHello World\nPassword is Invalid."
        ));

        return c;
    }

    private static ArrayList<Child> getSequences() {
        ArrayList<Child> c = new ArrayList<>();

        c.add(new Child(
                "Fibonacci Sequence",
                "Generate Fibonacci sequence.\nThe first two fibonacci numbers are 0 and 1.\nAnd after that every number is the sum of the two preceding numbers.",
                String.format("import java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class Fibonacci {\n    public static void main(String[] args) {\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n            generateFibonacci(terms);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void generateFibonacci(int terms) {\n        String fibonacci = Stream.iterate(new int[]{0, 1}, ints -> new int[]{ints[1], ints[0] + ints[1]})\n                .limit(terms)\n                .map(ints -> ints[0])\n                .map(String::valueOf)\n                .collect(Collectors.joining(\", \"));\n\n        System.out.printf(\"Fibonacci series upto %%d terms is:%%n%%s\", terms, fibonacci);\n    }\n}"),
                "Enter number of terms.\n10\nFibonacci series upto 10 terms is:\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34"
        ));

        c.add(new Child(
                "Tribonacci Sequence",
                "Tribonacci sequence works the same as Fibonacci sequence but instead of 2 we sum the last 3 numbers of the sequence to generate the next term.\n\nFor example\n\n[1, 1, 1, 3, 5, 9, 17, 31, ...] are the first few terms of the Tribonacci sequence starting with [1, 1, 1]",
                String.format("import java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class Sequence {\n    public static void main(String[] args) {\n        try(var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n\n            findTribonacciSequence(terms);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void findTribonacciSequence(int terms) {\n        int[] start = {1, 1, 1};\n        List<Integer> tribonacci = Stream.iterate(start, Sequence::applySequenceRule)\n                .mapToInt(tuple -> tuple[0])\n                .limit(terms)\n                .boxed()\n                .collect(Collectors.toList());\n\n        System.out.printf(\"The Tribonacci sequence upto %%d terms are :%%n%%s\", terms, tribonacci);\n    }\n\n    private static int[] applySequenceRule(int[] tuple) {\n        return new int[] {tuple[1], tuple[2], tuple[0] + tuple[1] + tuple[2]};\n    }\n}"),
                "Enter number of terms.\n10\nThe Tribonacci sequence upto 10 terms are :\n[1, 1, 1, 3, 5, 9, 17, 31, 57, 105]"
        ));

        c.add(new Child(
                "N-bonacci Sequence",
                "N-bonacci sequence is the generalised version of Fibonacci series.\nCreate a method which takes the first N starting elements and the number of terms and returns the sequence by summing the last N terms of the series upto the given term.\n\nFor example:\n\nInput : [1, 1, 1, 1] 10\nOutput : [1, 1, 1, 1, 4, 7, 13, 25, 49, 94,..]",
                String.format("import java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.stream.IntStream;\n\npublic class Sequence {\n    public static void main(String[] args) {\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter the size of the start array\");\n            int size = sc.nextInt();\n\n            System.out.println(\"Enter the elements of the start array.\");\n            int[] start = new int[size];\n            for (int i = 0; i < start.length; i++) {\n                start[i] = sc.nextInt();\n            }\n\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n\n            findNbonacciSequence(start, terms);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void findNbonacciSequence(int[] start, int terms) {\n        int[] nbonacci = Arrays.copyOf(start, terms);\n        IntStream.range(start.length, terms)\n                .forEach(index ->\n                        nbonacci[index] = Arrays.stream(nbonacci)\n                                .skip(index - start.length)\n                                .limit(start.length)\n                                .sum()\n                );\n\n        System.out.printf(\"The Nbonacci sequence upto %%d terms are :%%n%%s\", terms, Arrays.toString(nbonacci));\n    }\n}"),
                "Enter the size of the start array\n4\nEnter the elements of the start array.\n1\n1\n1\n1\nEnter number of terms.\n10\nThe Nbonacci sequence upto 10 terms are :\n[1, 1, 1, 1, 4, 7, 13, 25, 49, 94]"
        ));

        c.add(new Child(
                "Euler's Totient",
                "In number theory, Euler's totient function (phi function) counts the positive integers up to a given integer n that are relatively prime to n.\n\nTwo integers are said to be relatively prime if the only positive integer (factor) that divides both of them is 1.\n\nThe numbers less than or equal to and relatively prime to a given number n are called Totatives.",
                String.format("import java.util.Scanner;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class EulerTotient {\n    public static void main(String[] args) {\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n\n            findTotatives(terms);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void findTotatives(int terms) {\n        AtomicInteger ai = new AtomicInteger(1);\n\n        IntStream.rangeClosed(1, terms)\n        .mapToObj(i ->\n            IntStream.rangeClosed(1, i)\n            .filter(j -> gcd(i, j) == 1)\n            .boxed()\n            .collect(Collectors.toList()))\n        .collect(Collectors.toMap(i -> ai.getAndAdd(1), Function.identity()))\n        .forEach((k, v) -> System.out.printf(\"phi(%%d) = %%d, totatives : %%s%%n\", k, v.size(), v));\n    }\n\n    private static int gcd(int i, int j) {\n        return i == 0 ? j : gcd(j %% i, i);\n    }\n}"),
                "Enter number of terms.\n10\nphi(1) = 1, totatives : [1]\nphi(2) = 1, totatives : [1]\nphi(3) = 2, totatives : [1, 2]\nphi(4) = 2, totatives : [1, 3]\nphi(5) = 4, totatives : [1, 2, 3, 4]\nphi(6) = 2, totatives : [1, 5]\nphi(7) = 6, totatives : [1, 2, 3, 4, 5, 6]\nphi(8) = 4, totatives : [1, 3, 5, 7]\nphi(9) = 6, totatives : [1, 2, 4, 5, 7, 8]\nphi(10) = 4, totatives : [1, 3, 7, 9]        "
        ));

        c.add(new Child(
                "Generate sequence 1, 2, 4, 7, 11, 16, 22, 29, 37,...",
                "Generate the sequence 1, 2, 4, 7, 11, 16, 22,.. upto n terms",
                String.format("import java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Sequence {\n    public static void main(String[] args) {\n        try(var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n            generateSequence(terms);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void generateSequence(int terms) {\n\n        // The sequence is generate by : next term = previous term + position of previous term\n        // For example the 6th term of the sequence is 5th term + position of 5th term = 11 + 5 = 16\n\n        List<Integer> sequence =\n                IntStream.rangeClosed(0, terms)\n                .mapToObj(i -> 1 +\n                        IntStream.rangeClosed(0, i)\n                        .sum()\n                )\n                .collect(Collectors.toList());\n\n        System.out.printf(\"The sequence upto %%d terms is :%%n%%s\", terms, sequence);\n    }\n}"),
                "Enter number of terms.\n20\nThe sequence upto 20 terms is :\n[1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79, 92, 106, 121, 137, 154, 172, 191, 211]   "
        ));

        c.add(new Child(
                "Generate sequence 3, 4, 7, 9, 14, 16, 21,...",
                "Generate the sequence 3, 4, 7, 9, 14, 16, 21,.. upto n terms.",
                String.format("import java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Sequence {\n    public static void main(String[] args) {\n        try(var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n            generateSequence(terms);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void generateSequence(int terms) {\n        \n        // The sequence is generate by : n + log2(n) where n is a prime number\n        List<Integer> sequence =\n                IntStream.rangeClosed(2, terms)\n                .filter(num ->\n                        IntStream.rangeClosed(2, num / 2)\n                                .noneMatch(i -> num %% i == 0) // finding the prime numbers\n                )\n                .mapToObj(num -> num + Math.floor(Math.log(num) / Math.log(2))) // applying the formula n + log2(n) and log2(n) = log(n)/log(2)\n                .mapToInt(Double::intValue)\n                .boxed()\n                .collect(Collectors.toList());\n\n        System.out.printf(\"The sequence upto %%d terms is :%%n%%s\", terms, sequence);\n    }\n}"),
                "Enter number of terms.\n30\nThe sequence upto 30 terms is :\n[3, 4, 7, 9, 14, 16, 21, 23, 27, 33]  "
        ));

        c.add(new Child(
                "Find Sum of Natural numbers till N",
                "Find the sum of all natural numbers till a given number.",
                String.format("import java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Sequence {\n    public static void main(String[] args) {\n        try(var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n            findSum(terms);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void findSum(int n) {\n        String sequence = IntStream.rangeClosed(1, n).mapToObj(String::valueOf).collect(Collectors.joining(\" + \")); // generating the sequence upto n terms\n        int sum = n * (n + 1) / 2;  // sum of all natural numbers is given by the formula S = n * (n + 1) / 2\n        System.out.printf(\"The sum of the Sequence%%n%%s = %%d\", sequence, sum);\n    }\n}"),
                "Enter number of terms.\n8\nThe sum of the Sequence\n1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36    "
        ));

        c.add(new Child(
                "Find sum of first N Fibonacci numbers",
                "Find the sum of first N Fibonacci numbers.",
                String.format("import java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class Fibonacci {\n    public static void main(String[] args) {\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n            fibonacciSum(terms);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void fibonacciSum(int terms) {\n        String fibonacci = getFibonacciStream(terms)\n                          .map(String::valueOf)\n                          .collect(Collectors.joining(\" + \"));\n\n        int fibonacciSum = getFibonacciStream(terms)\n                            .mapToInt(Integer::intValue)\n                            .sum();\n\n        System.out.printf(\"The Fibonacci sum series is:%%n%%s = %%d\", fibonacci, fibonacciSum);\n    }\n\n    private static Stream<Integer> getFibonacciStream(int terms) {\n        return Stream.iterate(new int[]{0, 1}, ints -> new int[]{ints[1], ints[0] + ints[1]})\n                     .limit(terms)\n                     .map(ints -> ints[0]);\n    }\n}"),
                "Enter number of terms.\n10\nThe Fibonacci sum series is:\n0 + 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + 34 = 88    "
        ));

        c.add(new Child(
                "Find 1^2 + 2^2 + 3^2 +...+ N^2",
                "Find the sum of all natural numbers squared till a given number.",
                String.format("import java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Sequence {\n    public static void main(String[] args) {\n        try(var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n            findSum(terms);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void findSum(int n) {\n        String sequence = IntStream.rangeClosed(1, n).mapToObj(String::valueOf).collect(Collectors.joining(\"^2 + \")); // generating the sequence upto n terms\n        int sum = n * (n + 1) * (2 * n + 1) / 6;  // sum of all natural numbers squared is given by the formula S = n * (n + 1) * (2 * n + 1)/ 6\n        System.out.printf(\"The sum of the Sequence%%n%%s^2 = %%d\", sequence, sum);\n    }\n}"),
                "Enter number of terms.\n6\nThe sum of the Sequence\n1^2 + 2^2 + 3^2 + 4^2 + 5^2 + 6^2 = 91    "
        ));

        c.add(new Child(
                "Find 1^x + 2^x + 3^x +..+ N^x",
                "Find the sum of all natural number powered a given number upto given term.",
                String.format("import java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Sequence {\n    public static void main(String[] args) {\n        try(var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n\n            System.out.println(\"Enter the power.\");\n            int power = sc.nextInt();\n\n            findSum(terms, power);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void findSum(int term, int power) {\n        String sequence = IntStream.rangeClosed(1, term).mapToObj(String::valueOf).collect(Collectors.joining(String.format(\"^%%d + \", power))); // generating the sequence upto n terms\n\n        long sum = IntStream.rangeClosed(1, term) // generate sequence from 1 to term\n                .mapToObj(n -> Math.pow(n, power)) // map each element of the sequence to the given power\n                .mapToLong(Double::longValue) // extract long value\n                .sum(); // get sum\n\n        System.out.printf(\"The sum of the Sequence%%n%%s^%%d = %%d\", sequence, power, sum);\n    }\n}"),
                "Enter number of terms.\n6\nEnter the power.\n8\nThe sum of the Sequence\n1^8 + 2^8 + 3^8 + 4^8 + 5^8 + 6^8 = 2142595   "
        ));

        c.add(new Child(
                "Find 1 + 1/2 + 1/3 +...+ 1/N",
                "Find the sum of the series 1 + 1/2 + 1/3 +... upto N terms.",
                String.format("import java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Sequence {\n    public static void main(String[] args) {\n        try(var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n            findSum(terms);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void findSum(int term) {\n        String sequence = IntStream.rangeClosed(1, term)\n                          .mapToObj(\"(1/%%d)\"::formatted)\n                          .collect(Collectors.joining(\" + \")); // generating the sequence upto n terms\n\n        double sum = IntStream.rangeClosed(1, term) // generate sequence from 1 to term\n                     .mapToObj(n -> 1.0/n) // map each element of the sequence to 1 / n\n                     .mapToDouble(Double::doubleValue) // extract double value\n                     .sum(); // get sum\n\n        System.out.printf(\"The sum of the Sequence%%n%%s = %%s\", sequence, sum);\n    }\n}"),
                "Enter number of terms.\n5\nThe sum of the Sequence\n(1/1) + (1/2) + (1/3) + (1/4) + (1/5) = 2.283333333333333     "
        ));

        c.add(new Child(
                "Find 1 + (1/2)^2 + (1/3)^2 + ..+ (1/N)^2",
                "Find the sum of the series 1 + 1/2^2 + 1/3^2 + .. upto N terms.",
                String.format("import java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Sequence {\n    public static void main(String[] args) {\n        try(var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n            findSum(terms);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void findSum(int term) {\n        String sequence = IntStream.rangeClosed(1, term)\n                          .mapToObj(\"(1/%%d)\"::formatted)\n                          .collect(Collectors.joining(\"^2 + \")); // generating the sequence upto n terms\n\n        double sum = IntStream.rangeClosed(1, term) // generate sequence from 1 to term\n                      .mapToObj(n ->Math.pow((1.0/n), 2)) // map each element of the sequence to 1 / n^given power\n                     .mapToDouble(Double::doubleValue) // extract double value\n                     .sum(); // get sum\n\n        System.out.printf(\"The sum of the Sequence%%n%%s^2 = %%s\", sequence, sum);\n    }\n}"),
                "Enter number of terms.\n10\nThe sum of the Sequence\n(1/1)^2 + (1/2)^2 + (1/3)^2 + (1/4)^2 + (1/5)^2 + (1/6)^2 + (1/7)^2 + (1/8)^2 + (1/9)^2 + (1/10)^2 = 1.5497677311665408   "
        ));

        c.add(new Child(
                "Find 1 + (1/2)^x + (1/3)^x + ..+ (1/N)^x",
                "Find the sum of the series 1 + (1/2)^x + (1/3)^x + ..+ (1/N)^x where N and x are given by the user.",
                String.format("import java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Sequence {\n    public static void main(String[] args) {\n        try(var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n\n            System.out.println(\"Enter the power.\");\n            int power = sc.nextInt();\n\n            findSum(terms, power);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void findSum(int term, int power) {\n        String sequence = IntStream.rangeClosed(1, term)\n                          .mapToObj(\"(1/%%d)\"::formatted)\n                          .collect(Collectors.joining(String.format(\"^%%d + \", power))); // generating the sequence upto n terms\n\n        double sum = IntStream.rangeClosed(1, term) // generate sequence from 1 to term\n                     .mapToObj(n ->Math.pow((1.0/n), power)) // map each element of the sequence to 1 / given power\n                     .mapToDouble(Double::doubleValue) // extract double value\n                     .sum(); // get sum\n\n        System.out.printf(\"The sum of the Sequence%%n%%s^%%d = %%s\", sequence, power, sum);\n    }\n}"),
                "Enter number of terms.\n6\nEnter the power.\n5\nThe sum of the Sequence\n(1/1)^5 + (1/2)^5 + (1/3)^5 + (1/4)^5 + (1/5)^5 + (1/6)^5 = 1.0367903896604937    "
        ));

        c.add(new Child(
                "Find 1 + x + x^2/2! + x^3/3! +..+ upto n terms",
                "Find the sum of the series of e^x\nThe series is given by 1 + x + x^2/2! + x^3/3! +...",
                String.format("import java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Sequence {\n    public static void main(String[] args) {\n        try(var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int terms = sc.nextInt();\n\n            System.out.println(\"Enter the value of x.\");\n            double x = sc.nextDouble();\n\n            findSum(terms, x);\n\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static void findSum(int term, double x) {\n        // generate the sequence\n        String sequence = IntStream.rangeClosed(1, term)\n                          .mapToObj(s -> formatter(s, x))\n                          .collect(Collectors.joining(\" + \"));\n\n        // find sum\n        double sum = 1 + IntStream.rangeClosed(1, term) // generate sequence from 1 to term\n                         .mapToObj(n -> Math.pow(x,n) / factorial(n)) // map each element of the sequence to n^n/n!\n                         .mapToDouble(Double::doubleValue) // extract double value\n                         .sum(); // get sum\n\n        System.out.printf(\"The sum of the Sequence%%n1 + %%s = %%s ≅ e^%%s\", sequence, sum, x);\n    }\n\n    private static double factorial(int n) {\n        if (n == 1) return n;\n        else return n * factorial(n-1);\n    }\n\n    private static String formatter(int n, double x) {\n        return String.format(\"%%s^%%d/%%d!\", x, n, n);\n    }\n}"),
                "Enter number of terms.\n10\nEnter the value of x.\n1\nThe sum of the Sequence\n1 + 1.0^1/1! + 1.0^2/2! + 1.0^3/3! + 1.0^4/4! + 1.0^5/5! + 1.0^6/6! + 1.0^7/7! + 1.0^8/8! + 1.0^9/9! + 1.0^10/10! = 2.7182818011463845 ≅ e^1.0     "
        ));

        return c;
    }

    @NotNull
    private static ArrayList<Child> getMathematics() {
        ArrayList<Child> c = new ArrayList<>();
        c.add(new Child(
                "Pythagorean Triplets",
                "A Pythagorean Triplet consists of three positive integers a, b and c such that a^2 + b^2 = c^2.\nWrite a java program to find Pythagorean Triplets in a given range.",
                "import java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.stream.LongStream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            long range = sc.nextLong();\n\n            if (range < 1) {\n                System.out.println(\"Please enter a number greater than 1.\");\n            } else {\n                generatePythagoreanTriplets(range);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static void generatePythagoreanTriplets(long range) {\n        System.out.printf(\"All Pythagorean Triplets upto %d are :%n\", range);\n        LongStream.range(1, range)\n                  .boxed()\n                  .flatMap(a -> LongStream.range(a, range)\n                                          .filter(b -> Math.hypot(a, b) %% 1 == 0)\n                                          .mapToObj(b -> new long[] {a, b, (long) Math.hypot(a, b)})\n                  ).map(Arrays::toString)\n                  .forEach(System.out::println);\n    }\n}",
                "Enter a number\n20\nAll Pythagorean Triplets upto 20 are :\n[3, 4, 5]\n[5, 12, 13]\n[6, 8, 10]\n[8, 15, 17]\n[9, 12, 15]\n[12, 16, 20]"
        ));

        c.add(new Child(
                "Roots of Quadratic Equation",
                "Write a method to find the roots of a given quadratic equation of the form Ax^2 + Bx + C = 0, where A, B and C are integers.",
                "import java.text.MessageFormat;\nimport java.util.NoSuchElementException;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (Scanner sc = new Scanner(System.in)) {\n            System.out.println(\"Enter the value of a (coefficient of x^2).\");\n            double a = sc.nextDouble();\n\n            System.out.println(\"Enter the value of b (coefficient of x).\");\n            double b = sc.nextDouble();\n\n            System.out.println(\"Enter the value of c.\");\n            double c =sc.nextDouble();\n\n            System.out.printf(\"The given equation is %sx^2 + %sx + %s = 0%n\", a, b, c);\n            solve(a, b, c);\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter valid coefficients.\");\n        }\n    }\n\n    private static void solve(double a, double b, double c) {\n        final double DETERMINANT = b * b - 4 * a * c;\n\n        if (a == 0) {\n            // a = 0 => bx + c = 0\n            if (b == 0) {\n                // b = 0 => c (any constant) = 0 , which is impossible\n                throw new NoSuchElementException();\n\n            } else {\n                // if b ≠ 0 , then bx + c = 0 => x = -c/b\n                System.out.println(\"It is a Linear equation.\\nRoot = \" + (-c / b));\n            }\n        } else if (c == 0) {\n            // if c = 0\n            // ax^2 + bx = 0 => x * (ax + b) = 0 => x = 0 and x = -b/a\n            // that is, one root of the equation will always be 0\n            // and we only need to calculate the second root, x = -b/a\n            System.out.println(\"Root1 = 0\" + \"\\n\" + \"Root2 = \" + (-b / a));\n\n        } else if (DETERMINANT == 0) {\n            // if DETERMINANT = 0 then the equation should have two equal real roots\n            // and they are given by the formula x = -b/2a\n            double root = -b / (2.0 * a);\n\n            System.out.println(\"It has two equal real roots.\");\n            System.out.printf(\"Root1 = Root2 = %%s%%n\", root);\n\n        } else if (DETERMINANT > 0) {\n            // if DETERMINANT > 0 then the equation should have two distinct real root\n            // given by the formula x = -b ± √((b^2 − 4∗a∗c)) / 2*a\n            final double DISCRIMINANT = Math.sqrt(DETERMINANT);\n            double root1 = (-b + DISCRIMINANT) / 2 * a;\n            double root2 = (-b - DISCRIMINANT) / 2 * a;\n\n            System.out.println(\"It has two distinct real roots.\");\n            System.out.printf(\"Root1 = %%s\\nRoot2 = %%s%%n\", root1, root2);\n\n        } else if (DETERMINANT < 0) {\n            // if DETERMINANT < 0 then the equation should have two imaginary root\n            double real = -b/ (2.0 * a);\n            double imaginary = Math.sqrt(Math.abs(DETERMINANT)) / (2 * a);\n\n            System.out.println(\"It has Imaginary roots.\");\n            System.out.println(MessageFormat.format(\"Root1 = {0} + i {1}\\nRoot2 = {0} - i {1}\", real, imaginary));\n        }\n    }\n}",
                "Enter the value of a (coefficient of x^2).\n2\nEnter the value of b (coefficient of x).\n8\nEnter the value of c.\n15\nThe given equation is 2.0x^2 + 8.0x + 15.0 = 0\nIt has Imaginary roots.\nRoot1 = -2 + i 1.871\nRoot2 = -2 - i 1.871"
        ));

        c.add(new Child(
                "Find Prime Factors of a Number",
                "Find all the prime factors of a given number.",
                "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            long input = sc.nextLong();\n\n            if (input < 1) {\n                System.out.println(\"Please enter a number greater than 1.\");\n            } else {\n                generatePrimeFactors(input);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static void generatePrimeFactors(long num) {\n        long storeNum = num;\n        ArrayList<Long> primeFactors = new ArrayList<>();\n        for (long i = 2; i < Math.sqrt(num); i++) {\n            while (num % i == 0) {\n                primeFactors.add(i);\n                num /= i;\n            }\n        }\n        if (num > 1) primeFactors.add(num);\n        System.out.printf(\"All prime factors of %%d are :%n%s.\", storeNum, primeFactors);\n    }\n}",
                "Enter a number\n196\nAll prime factors of 196 are :\n[2, 2, 49].\n"
        ));

        c.add(new Child(
                "Calculate Factorial",
                "Write a Java program to calculate the factorial of a number.",
                "import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter a number to know its factorial.\");\n            int num = sc.nextInt();\n            System.out.printf(\"Factorial of %d is %s\", num, factorial(num));\n\n        } catch (Exception e) {\n            System.out.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static BigInteger factorial(int num) {\n        if (num == 1) return BigInteger.ONE;\n        else return BigInteger.valueOf(num).multiply(factorial(num - 1));\n    }\n}",
                "Enter a number to know its factorial.\n5\nFactorial of 5 is 120"
        ));

        c.add(new Child(
                "Calculate Permutation nPr",
                "Write a java program to calculate Permutation.",
                "import java.math.BigInteger;\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter the value of n in nPr.\");\n            int n = sc.nextInt();\n\n            System.out.println(\"Enter the value of r in nPr.\");\n            int r = sc.nextInt();\n\n            BigInteger nPr = calculatePermutation(n, r);\n            System.out.printf(\"%dP%d = %s\", n, r, nPr);\n\n        } catch (Exception e) {\n            System.out.println(\"Math Error!\\n\" + e);\n        }\n    }\n\n    private static BigInteger calculatePermutation(int n, int r) {\n        if (n < r) throw new InputMismatchException(\"Value of n must be greater than or equal to r.\");\n        \n        /* using the formula, nPr = n!/(n-r)! */\n        return factorial(n).divide(factorial(n - r));\n    }\n\n    private static BigInteger factorial(int num) {\n        if (num == 1) return BigInteger.ONE;\n        else return BigInteger.valueOf(num).multiply(factorial(num - 1));\n    }\n}",
                "Enter the value of n in nPr.\n12\nEnter the value of r in nPr.\n8\n12P8 = 19958400"
        ));

        c.add(new Child(
                "Calculate Combination nCr",
                "Write a java program to calculate Combination.",
                "import java.math.BigInteger;\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter the value of n in nCr.\");\n            int n = sc.nextInt();\n\n            System.out.println(\"Enter the value of r in nCr.\");\n            int r = sc.nextInt();\n\n            BigInteger nCr = calculateCombination(n, r);\n            System.out.printf(\"%dC%d = %s\", n, r, nCr);\n\n        } catch (Exception e) {\n            System.out.println(\"Math Error!\\n\" + e);\n        }\n    }\n\n    private static BigInteger calculateCombination(int n, int r) {\n        if (n < r) throw new InputMismatchException(\"Value of n must be greater than or equal to r.\");\n\n        /* using the formula, nCr = n!/(r! * (n-r)!) */\n        return factorial(n).divide(factorial(r).multiply(factorial(n - r)));\n    }\n\n    private static BigInteger factorial(int num) {\n        if (num == 1) return BigInteger.ONE;\n        else return BigInteger.valueOf(num).multiply(factorial(num - 1));\n    }\n}",
                "Enter the value of n in nCr.\n42\nEnter the value of r in nCr.\n17\n42C17 = 254661927156"
        ));

        c.add(new Child(
                "Calculate Mean, Median and Mode",
                "Given an array of doubles calculate Mean, Median and Mode.",
                "import java.text.MessageFormat;\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int limit = sc.nextInt();\n\n            double[] array = new double[limit];\n\n            System.out.println(\"Enter all the values.\");\n            for (int i = 0; i < array.length; i++) {\n                array[i] = sc.nextDouble();\n            }\n\n            System.out.println(MessageFormat.format(\"The given array is {0}\\n\\nMean of the array is {1}\\nMedian of the array is {2}\", Arrays.toString(array), getMean(array), getMedian(array)));\n            System.out.println(getMode(array).isEmpty()? \"No Mode\" : \"Mode of the array is \" + getMode(array));\n\n        } catch (Exception e) {\n            System.out.println(\"Math Error!\\n\" + e);\n        }\n    }\n\n    private static double getMean(double[] array) {\n        return Arrays.stream(array).reduce(0.0, Double::sum) / array.length;\n    }\n\n    private static double getMedian(double[] array) {\n        int middle = array.length / 2;\n        return array.length % 2 == 1 ? array[middle] : (array[middle] + array[middle - 1]) / 2.0;\n    }\n\n    private static List<Double> getMode(double[] array) {\n\n        /* Map all the entries of the array with their frequencies */\n        final Map<Double, Long> countFrequencies = Arrays.stream(array)\n                .boxed()\n                .collect(Collectors.groupingBy(\n                        Function.identity(), Collectors.counting())\n                );\n\n        /* find the max frequency */\n        final long maxFrequency = countFrequencies.values()\n                .stream()\n                .mapToLong(Long::longValue)\n                .max()\n                .orElse(-1);\n\n        /* find the keys associated with max frequency and add them to list */\n        return countFrequencies.entrySet().stream()\n                .filter(t -> t.getValue() == maxFrequency && maxFrequency > 1)\n                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n    }\n}",
                "Enter number of terms.\n10\nEnter all the values.\n4\n1\n12\n4\n3\n12\n4\n12\n5\n9\nThe given array is [4.0, 1.0, 12.0, 4.0, 3.0, 12.0, 4.0, 12.0, 5.0, 9.0]\n\nMean of the array is 6.6\nMedian of the array is 7.5\nMode of the array is [4.0, 12.0]"
        ));

        c.add(new Child(
                "Calculate Range, Variance and Standard Deviation",
                "Given an array of doubles calculate the Range, Variance and Standard Deviation",
                "import java.text.MessageFormat;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter number of terms.\");\n            int limit = sc.nextInt();\n\n            double[] array = new double[limit];\n\n            System.out.println(\"Enter all the values.\");\n            for (int i = 0; i < array.length; i++) {\n                array[i] = sc.nextDouble();\n            }\n\n            double mean = getMean(array);\n            double variance = getVariance(array, mean);\n            double standardDeviation = getStandardDeviation(variance);\n\n            System.out.println(MessageFormat.format(\"The given array is {0}\\n\\nRange is {1}\\nVariance = {2}\\nStandard Deviation = {3}\", Arrays.toString(array), getRange(array), variance, standardDeviation));\n\n        } catch (Exception e) {\n            System.out.println(\"Math Error!\\n\" + e);\n        }\n    }\n\n    private static double getMean(double[] array) {\n        return Arrays.stream(array).reduce(0.0, Double::sum) / array.length;\n    }\n\n    private static double getVariance(double[] array, double mean) {\n        return Arrays.stream(array)\n                .map(num -> Math.pow((num - mean), 2))\n                .reduce(0.0, Double::sum) / (array.length - 1);\n    }\n\n    private static double getStandardDeviation(double variance) {\n        return Math.sqrt(variance);\n    }\n\n    private static double getRange(double[] array) {\n        return Arrays.stream(array).max().orElse(-1) - Arrays.stream(array).min().orElse(-1);\n    }\n}",
                "Enter number of terms.\n6\nEnter all the values.\n11.2\n11.9\n12.0\n12.8\n13.4\n14.3\nThe given array is [11.2, 11.9, 12.0, 12.8, 13.4, 14.3]\n\nRange is 3.1\nVariance = 1.276\nStandard Deviation = 1.13"
        ));

        c.add(new Child(
                "Basic Calculator",
                "Write a program to calculate the basic arithmetic operations on two given real number.",
                "import java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (Scanner sc = new Scanner(System.in)) {\n            System.out.println(\"Enter first number.\");\n            double a = sc.nextDouble();\n\n            System.out.println(\"Enter operator.\");\n            String operator = sc.next();\n\n            System.out.println(\"Enter second number.\");\n            double b =sc.nextDouble();\n\n            System.out.printf(\"%s %s %s = %s\", a, operator, b, calculate(a, operator, b));\n\n        } catch (InputMismatchException ime) {\n            System.err.println(ime);\n        }\n    }\n\n    private static double calculate(double a, String operator, double b) {\n        return switch (operator) {\n            case \"+\" -> a + b;\n            case \"-\" -> a - b;\n            case \"*\" -> a * b;\n            case \"/\" -> a / b;\n            default -> throw new InputMismatchException(\"Unexpected value: \" + operator);\n        };\n    }\n}",
                "Enter first number.\n6\nEnter operator.\n*\nEnter second number.\n7\n6.0 * 7.0 = 42.0"
        ));

        c.add(new Child(
                "Complex Number Calculator",
                "Write a program to calculate the basic arithmetic operations on two given complex numbers.",
                "import java.util.Random;\nimport java.util.Scanner;\n\n/* {@code ComplexNumber} can perform 4 basic operations, (addition, subtraction, multiplication and division) on two Complex Numbers. */\n/* If no input was given then the result will be shown with random values. */\n\npublic class Complex {\n    private double real;\n    private double imaginary;\n\n    public Complex() {}\n\n    public Complex(double real, double imaginary) {\n        this.real = real;\n        this.imaginary = imaginary;\n    }\n\n    public double getReal(){\n        return this.real;\n    }\n\n    public double getImaginary() {\n        return this.imaginary;\n    }\n\n    public double modulus() {\n        return Math.hypot(this.real, this.imaginary);\n    }\n\n    public double argument() {\n        return Math.atan2(this.imaginary, this.real);\n    }\n\n    public Complex conjugate() {\n        return new Complex(this.real, -this.imaginary);\n    }\n\n    private Complex addition (Complex z) {\n        Complex sum = new Complex();\n        sum.real = this.real + z.real;\n        sum.imaginary = this.imaginary + z.imaginary;\n        return sum;\n    }\n\n    private Complex subtraction (Complex z) {\n        Complex sub = new Complex();\n        sub.real = this.real - z.real;\n        sub.imaginary = this.imaginary - z.imaginary;\n        return sub;\n    }\n\n    private Complex multiplication (Complex z) {\n        Complex mult = new Complex();\n        mult.real = this.real * z.real - this.imaginary * z.imaginary;\n        mult.imaginary = this.imaginary * z.real + this.real * z.imaginary;\n        return mult;\n    }\n\n    private Complex division (Complex z) {\n        Complex div = new Complex();\n        double denominator = (z.real * z.real) + (z.imaginary * z.imaginary);\n\n        if(denominator <= 0){\n            print(\"⚠ Cannot divide by zero!\");\n            System.exit(0);\n\n        } else {\n            div.real = ((this.real * z.real) + (this.imaginary * z.imaginary) )/ denominator;\n            div.imaginary = ((this.imaginary * z.real) - (this.real * z.imaginary)) / denominator ;\n        }\n        return div;\n    }\n\n    public String toString(){\n        if(this.imaginary >= 0)\n            return String.format(\"%s + %s i\", this.real, this.imaginary);\n        else\n            return String.format(\"%s - %s i\", this.real, this.imaginary);\n\n    }\n\n    public static void main(String[] args) {\n        try (Scanner sc = new Scanner(System.in)){\n\n            System.out.println(\"Enter the real coefficients for the first complex number.\");\n            double a1 = sc.nextDouble();\n            double b1 = sc.nextDouble();\n\n            System.out.println(\"Enter the real coefficients for the second complex number.\");\n            double a2 = sc.nextDouble();\n            double b2 = sc.nextDouble();\n\n            Complex z1 = new Complex (a1, b1);\n            Complex z2 = new Complex (a2, b2);\n\n            System.out.printf(\"Your entered two Complex Numbers are:\\n\\n\uD83D\uDD39z1 = %s   and\\n\uD83D\uDD39z2 = %s\\n\\n\", z1.toString(), z2.toString());\n\n            printCalculatios(z1,z2);\n\n        } catch (Exception e) {\n            getDefaultTestCases();\n        }\n    }\n\n    private static void getDefaultTestCases() {\n        Random rnd = new Random();\n\n        int a1 = rnd.nextInt(10+10)-10;\n        int b1 = rnd.nextInt(10+10)-10;\n        int a2 = rnd.nextInt(10+10)-10;\n        int b2 = rnd.nextInt(10+10)-10;\n\n        Complex z1 = new Complex (a1, b1);\n        Complex z2 = new Complex (a2, b2);\n\n        System.out.printf(\"Generating two random Complex Numbers...\\n\\n\uD83D\uDD39z1 = %s   and\\n\\n\uD83D\uDD39z2 = %s\\n\\n\", z1.toString(), z2.toString());\n\n        printCalculatios(z1, z2);\n    }\n\n\n    private static void printCalculatios(Complex z1, Complex z2){\n\n        print(separator() + \"\\n\\n\uD83D\uDCDD Now let's take closer look at z1 first:\"+ underline());\n        print(\"\uD83D\uDD39Real part of z1, (Rl z1) = \" + z1.getReal());\n        print(\"\uD83D\uDD39Imaginary part of z1, (Im z1) = \"+ z1.getImaginary());\n        print(\"\uD83D\uDD39Conjugate of z1 = \" + z1.conjugate().toString());\n        print(\"\uD83D\uDD39Modulus of z1, (mod z1) = \" + z1.modulus());\n\n        if(z1.getReal()==0 && z1.getImaginary()==0){\n            print(\"\uD83D\uDD39Argument cannot be determined for the zero complex number.\\n\\n\uD83D\uDD39Consequently, a zero complex number cannot be represented in polar form.\");\n\n        } else {\n            print(\"\uD83D\uDD39The principle argument of z1, (arg z1) = \" + z1.argument()/Math.PI +\" π\");\n            print(\"\uD83D\uDD39Polar form of z1 = \" + z1.modulus() + \" (cos(\" + z1.argument()/Math.PI +\" π) + i sin(\" + z1.argument()/Math.PI +\" π))\");\n        }\n\n        print(separator() + \"\\n\\n\uD83D\uDCDD Now let's take closer look at z2:\"+ underline());\n        print(\"\uD83D\uDD39Real part of z2, (Rl z2) = \" + z2.getReal());\n        print(\"\uD83D\uDD39Imaginary part of z2, (Im z2) = \"+ z2.getImaginary());\n        print(\"\uD83D\uDD39Conjugate of z2 = \" + z2.conjugate().toString());\n        print(\"\uD83D\uDD39Modulus of z2, (mod z2) = \" + z2.modulus());\n\n        if(z2.getReal()==0 && z2.getImaginary()==0){\n            print(\"\uD83D\uDD39Argument cannot be determined for the zero complex number.\\n\\n\uD83D\uDD39Consequently, a zero complex number cannot be represented in polar form.\");\n\n        } else {\n            print(\"\uD83D\uDD39The principle argument of z2, (arg z2) = \" + z2.argument()/Math.PI +\" π\");\n            print(\"\uD83D\uDD39Polar form of z2 = \" + z2.modulus() + \" (cos(\" + z2.argument()/Math.PI +\" π) + i sin(\" + z2.argument()/Math.PI +\" π))\");\n        }\n\n        print(separator() + \"\\n\\n✏ Now let's do some maths:\" + underline());\n\n        print(\"✏ By Adding z1 and z2 we get,\\n\\n\uD83D\uDD39z1 + z2 = \" + (z1.addition(z2)).toString());\n        print(\"\\n✏ By Subtracting z2 from z1 we get,\\n\\n\uD83D\uDD39z1 - z2 = \" + (z1.subtraction(z2)).toString());\n        print(\"\\n✏ By Multiplying z1 with z2 we get,\\n\\n\uD83D\uDD39z1 * z2 = \" + (z1.multiplication(z2)).toString());\n        print(\"\\n✏ Dividing z1 by z2 we get,\\n\\n\uD83D\uDD39z1 / z2 = \" + (z1.division(z2)).toString());\n    }\n\n    private static String underline(){ return \"\\nーーーーーーーーーーーーーーーーーーーーーーー\\n\";}\n    private static String separator(){ return \"\\n\\n\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\\n\";}\n    private static void print(String str){ System.out.println(str + \"\\n\"); }}",
                "Enter the real coefficients for the first complex number.\n27\n31\nEnter the real coefficients for the second complex number.\n21\n9\nYour entered two Complex Numbers are:\n\n\uD83D\uDD39z1 = 27.0 + 31.0 i   and\n\uD83D\uDD39z2 = 21.0 + 9.0 i\n\n\n\n\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\n\n\n\uD83D\uDCDD Now let's take closer look at z1 first:\nーーーーーーーーーーーーーーーーーーーーーーー\n\n\n\uD83D\uDD39Real part of z1, (Rl z1) = 27.0\n\n\uD83D\uDD39Imaginary part of z1, (Im z1) = 31.0\n\n\uD83D\uDD39Conjugate of z1 = 27.0 - 31.0 i\n\n\uD83D\uDD39Modulus of z1, (mod z1) = 41.10960958218893\n\n\uD83D\uDD39The principle argument of z1, (arg z1) = 0.2719177012724309 π\n\n\uD83D\uDD39Polar form of z1 = 41.10960958218893 (cos(0.2719177012724309 π) + i sin(0.2719177012724309 π))\n\n\n\n\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\n\n\n\uD83D\uDCDD Now let's take closer look at z2:\nーーーーーーーーーーーーーーーーーーーーーーー\n\n\n\uD83D\uDD39Real part of z2, (Rl z2) = 21.0\n\n\uD83D\uDD39Imaginary part of z2, (Im z2) = 9.0\n\n\uD83D\uDD39Conjugate of z2 = 21.0 - 9.0 i\n\n\uD83D\uDD39Modulus of z2, (mod z2) = 22.847319317591726\n\n\uD83D\uDD39The principle argument of z2, (arg z2) = 0.1288810584091566 π\n\n\uD83D\uDD39Polar form of z2 = 22.847319317591726 (cos(0.1288810584091566 π) + i sin(0.1288810584091566 π))\n\n\n\n\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\uD83D\uDD38\n\n\n✏ Now let's do some maths:\nーーーーーーーーーーーーーーーーーーーーーーー\n\n\n✏ By Adding z1 and z2 we get,\n\n\uD83D\uDD39z1 + z2 = 48.0 + 40.0 i\n\n\n✏ By Subtracting z2 from z1 we get,\n\n\uD83D\uDD39z1 - z2 = 6.0 + 22.0 i\n\n\n✏ By Multiplying z1 with z2 we get,\n\n\uD83D\uDD39z1 * z2 = 288.0 + 894.0 i\n\n\n✏ Dividing z1 by z2 we get,\n\n\uD83D\uDD39z1 / z2 = 1.6206896551724137 + 0.7816091954022989 i"
        ));

        c.add(new Child(
                "Cartesian to Polar coordinates",
                "Write a program to convert given cartesian coordinates to its equivalent polar coordinates (rounded to 10 decimal places).",
                "import java.awt.geom.Point2D;\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.text.MessageFormat;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter X-coordinate\");\n            double x = sc.nextDouble();\n\n            System.out.println(\"Enter Y-coordinate.\");\n            double y = sc.nextDouble();\n\n            Point2D cartesian = new Point2D.Double(x, y);\n            Point2D polarCoordinates = getPolarCoordinates(cartesian);\n\n            double angle = polarCoordinates.getX();\n            double radius = polarCoordinates.getY();\n\n            System.out.println(MessageFormat.format(\"Polar coordinates:\\nAngle = {0}\\nRadius = {1}\",angle, radius));\n\n        } catch (Exception e) {\n            System.out.println(\"Math Error!\\n\" + e);\n        }\n    }\n\n    private static Point2D getPolarCoordinates(Point2D cartesian) {\n        double angle = BigDecimal.valueOf(\n                         Math.toDegrees(Math.atan(cartesian.getY() / cartesian.getX()))\n                       )\n                       .setScale(10, RoundingMode.HALF_UP)\n                       .doubleValue();\n\n        double radius = BigDecimal.valueOf(\n                          Math.hypot(cartesian.getX(), cartesian.getY())\n                        )\n                        .setScale(10, RoundingMode.HALF_UP)\n                        .doubleValue();\n\n        return new Point2D.Double(angle, radius);\n    }\n}",
                "Enter X-coordinate\n0.0\nEnter Y-coordinate.\n1.0\nPolar coordinates:\nAngle = 90\nRadius = 1"
        ));

        c.add(new Child(
                "Polar to Cartesian coordinates",
                "Write a program to convert given polar coordinates (an angle in degrees and a radius) to its equivalent cartesian coordinates (rounded to 10 decimal places).",
                String.format("import java.awt.geom.Point2D;\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.Scanner;\n\npublic class Main{\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)){\n            System.out.println(\"Enter degree of the polar coordinate.\");\n            double degrees = sc.nextDouble();\n            \n            System.out.println(\"Enter radius of the polar coordinate.\");\n            double radius = sc.nextDouble();\n\n            Point2D cartesian = getCartesian(degrees, radius);\n            System.out.printf(\"X-coordinate = %%s%%nY-coordinate = %%s%%n\", cartesian.getX(), cartesian.getY());\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter degrees and radius of the polar coordinate.\");\n        }\n    }\n\n    public static Point2D getCartesian(Double degrees, Double radius) {\n        double cos = Math.cos(Math.toRadians(degrees));\n        double sin = Math.sin(Math.toRadians(degrees));\n\n        double x = BigDecimal.valueOf(radius * cos).setScale(10, RoundingMode.HALF_UP).doubleValue();\n        double y = BigDecimal.valueOf(radius * sin).setScale(10, RoundingMode.HALF_UP).doubleValue();\n\n        return new Point2D.Double(x, y);\n    }\n}"),
                "Enter degree of the polar coordinate.\n90\nEnter radius of the polar coordinate.\n1\nX-coordinate = 0.0\nY-coordinate = 1.0"
        ));

        c.add(new Child(
                "Distance between points in 2D",
                "Write a method to calculate the distance between two given points in two dimension.",
                String.format("import java.awt.geom.Point2D;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter x coordinate of first point.\");\n            double x1 = sc.nextDouble();\n\n            System.out.println(\"Enter y coordinate of first point.\");\n            double y1 = sc.nextDouble();\n\n            System.out.println(\"Enter x coordinate of second point.\");\n            double x2 = sc.nextDouble();\n\n            System.out.println(\"Enter y coordinate of second point.\");\n            double y2 = sc.nextDouble();\n\n            /* initialize two point2d objects */\n            Point2D firstPoint = new Point2D.Double(x1, y1);\n            Point2D.Double secondPoint = new Point2D.Double(x2, y2);\n\n            /* calculate the distance between two points */\n            double distance = firstPoint.distance(secondPoint);\n\n            System.out.printf(\"Distance between [%%s, %%s] and  [%%s, %%s] is = %%s%%n\", x1, y1, x2, y2, distance);\n\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter all the coordinates.\");\n        }\n    }\n}"),
                "Enter x coordinate of first point.\n1\nEnter y coordinate of first point.\n6\nEnter x coordinate of second point.\n4\nEnter y coordinate of second point.\n2\nDistance between [1.0, 6.0] and  [4.0, 2.0] is = 5.0"
        ));

        c.add(new Child(
                "Slope of a Line in 2D",
                "Given two points find the slope of the line joining these two points.",
                String.format("import java.awt.geom.Point2D;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter x coordinate of first point.\");\n            double x1 = sc.nextDouble();\n\n            System.out.println(\"Enter y coordinate of first point.\");\n            double y1 = sc.nextDouble();\n\n            System.out.println(\"Enter x coordinate of second point.\");\n            double x2 = sc.nextDouble();\n\n            System.out.println(\"Enter y coordinate of second point.\");\n            double y2 = sc.nextDouble();\n\n            /* initialize two point2d objects */\n            Point2D firstPoint = new Point2D.Double(x1, y1);\n            Point2D.Double secondPoint = new Point2D.Double(x2, y2);\n\n            /* calculate the slope of the line joining two points */\n            Double slope = (secondPoint.getY() - firstPoint.getY()) / (secondPoint.getX() - firstPoint.getX()) ;\n\n            if (slope.isInfinite() || slope.isNaN()) {\n                System.out.println(\"Something went wrong!\\nThe line passing through the points is either vertical or same point was given twice.\");\n\n            } else {\n                System.out.printf(\"Slope of the line joining the two points [%%s, %%s] and  [%%s, %%s] is = %%s%%n\", x1, y1, x2, y2, slope);\n            }\n\n        } catch (Exception e) {\n            System.out.println(\"Please enter all the coordinates.\");\n        }\n    }\n}"),
                "Enter x coordinate of first point.\n1\nEnter y coordinate of first point.\n5\nEnter x coordinate of second point.\n3\nEnter y coordinate of second point.\n2\nSlope of the line joining the two points [1.0, 5.0] and  [3.0, 2.0] is = -1.5\n"
        ));

        c.add(new Child(
                "Perimeter of Triangle in 2D",
                "Write a method to calculate the perimeter of a triangle given three points.",
                String.format("import java.awt.geom.Point2D;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter x coordinate of first point.\");\n            double x1 = sc.nextDouble();\n\n            System.out.println(\"Enter y coordinate of first point.\");\n            double y1 = sc.nextDouble();\n\n            System.out.println(\"Enter x coordinate of second point.\");\n            double x2 = sc.nextDouble();\n\n            System.out.println(\"Enter y coordinate of second point.\");\n            double y2 = sc.nextDouble();\n\n            System.out.println(\"Enter x coordinate of third point.\");\n            double x3 = sc.nextDouble();\n\n            System.out.println(\"Enter y coordinate of third point.\");\n            double y3 = sc.nextDouble();\n\n            /* initialize three point2d objects */\n            Point2D a = new Point2D.Double(x1, y1);\n            Point2D b = new Point2D.Double(x2, y2);\n            Point2D c = new Point2D.Double(x3, y3);\n\n            System.out.printf(\"The perimeter of the triangle is %%s%%n\", trianglePerimeter(a, b, c));\n\n        } catch (Exception e) {\n            System.out.println(\"Please enter all the coordinates.\");\n        }\n    }\n    \n    /* method to calculate perimeter of a triangle */\n    private static double trianglePerimeter(Point2D a, Point2D b, Point2D c) {\n        return line(a, b) + line(b, c) + line(c, a);\n    }\n    \n    /* method to calculate distance between two points */\n    private static double line(Point2D a, Point2D b) {\n        double dx = b.getX() - a.getX();\n        double dy = b.getY() - a.getY();\n        return Math.hypot(dx, dy);\n    }\n}"),
                "Enter x coordinate of first point.\n10\nEnter y coordinate of first point.\n10\nEnter x coordinate of second point.\n40\nEnter y coordinate of second point.\n10\nEnter x coordinate of third point.\n10\nEnter y coordinate of third point.\n50\nThe perimeter of the triangle is 120.0"
        ));

        c.add(new Child(
                "Area of Triangle in 2D",
                "Write a method to calculate the area of a triangle given three points.",
                "import java.awt.geom.Point2D;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n            System.out.println(\"Enter x coordinate of first point.\");\n            double x1 = sc.nextDouble();\n\n            System.out.println(\"Enter y coordinate of first point.\");\n            double y1 = sc.nextDouble();\n\n            System.out.println(\"Enter x coordinate of second point.\");\n            double x2 = sc.nextDouble();\n\n            System.out.println(\"Enter y coordinate of second point.\");\n            double y2 = sc.nextDouble();\n\n            System.out.println(\"Enter x coordinate of third point.\");\n            double x3 = sc.nextDouble();\n\n            System.out.println(\"Enter y coordinate of third point.\");\n            double y3 = sc.nextDouble();\n\n            /* initialize three point2d objects */\n            Point2D a = new Point2D.Double(x1, y1);\n            Point2D b = new Point2D.Double(x2, y2);\n            Point2D c = new Point2D.Double(x3, y3);\n\n            System.out.printf(\"The perimeter of the triangle is %s%n\", triangleArea(a, b, c));\n\n        } catch (Exception e) {\n            System.out.println(\"Please enter all the coordinates.\");\n        }\n    }\n    /* calculating triangle area with three given points (ax, ay), (bx, by) and (cx, cy) */\n    /* with the formula (ax * (by - cy) + bx * (cy - ay) + cx * (ay - by))/2 */\n    private static double triangleArea(Point2D a, Point2D b, Point2D c) {\n        return Math.abs((\n                a.getX() * (b.getY() - c.getY()) +\n                b.getX() * (c.getY() - a.getY()) +\n                c.getX() * (a.getY() - b.getY())\n              ) / 2);\n    }\n}",
                "Enter x coordinate of first point.\n15\nEnter y coordinate of first point.\n-10\nEnter x coordinate of second point.\n40\nEnter y coordinate of second point.\n20\nEnter x coordinate of third point.\n20\nEnter y coordinate of third point.\n50\nThe perimeter of the triangle is 675.0"
        ));

        c.add(new Child(
                "Distance between Circles in 2D",
                "Write a method to calculate the distance between two circles when the center and radius of the circle is given.",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n\n            System.out.println(\"Enter x coordinate of the center of the first circle.\");\n            double x1 = sc.nextDouble();\n\n            System.out.println(\"Enter y coordinate of center of the first circle.\");\n            double y1 = sc.nextDouble();\n\n            System.out.println(\"Enter radius of the first circle.\");\n            double r1 = sc.nextDouble();\n\n            System.out.println(\"Enter x coordinate of the center of the second circle.\");\n            double x2 = sc.nextDouble();\n\n            System.out.println(\"Enter y coordinate of center of the second circle.\");\n            double y2 = sc.nextDouble();\n\n            System.out.println(\"Enter radius of the second circle.\");\n            double r2 = sc.nextDouble();\n\n            double dx = x2 - x1;\n            double dy = y2 - y1;\n\n            double distance = Math.max(0, Math.hypot(dx, dy) - (r1 + r2));\n\n            System.out.printf(\"Distance between two circles is %s.\", distance);\n\n        } catch (Exception e) {\n            System.out.println(\"Please enter all the coordinates.\");\n        }\n    }\n}",
                "Enter x coordinate of the center of the first circle.\n10\nEnter y coordinate of center of the first circle.\n60\nEnter radius of the first circle.\n11\nEnter x coordinate of the center of the second circle.\n40\nEnter y coordinate of center of the second circle.\n20\nEnter radius of the second circle.\n7\nDistance between two circles is 32.0."
        ));

        c.add(new Child(
                "Circle Circumference and Area in 2D",
                "Write a method to calculate the circumference and area of a circle with given radius.",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n\n            System.out.println(\"Enter radius of the circle.\");\n            double r = sc.nextDouble();\n\n            double circumference = 2 * Math.PI * r;\n            double area = Math.PI * r * r;\n\n            System.out.printf(\"Circumference of the circle = %s%nArea of the circle = %s%n\", circumference, area);\n        } catch (Exception e) {\n            System.out.println(\"Please enter all the coordinates.\");\n        }\n    }\n}",
                "Enter radius of the circle.\n30\nCircumference of the circle = 188.49555921538757\nArea of the circle = 2827.4333882308138"
        ));

        c.add(new Child(
                "Distance between points in 3D",
                "Write a method to calculate the distance between two given points in three dimension.",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n\n            System.out.println(\"Enter x, y and z components of the first point.\");\n            double x1 = sc.nextDouble();\n            double y1 = sc.nextDouble();\n            double z1 = sc.nextDouble();\n\n            System.out.println(\"Enter x, y and z components of the second point.\");\n            double x2 = sc.nextDouble();\n            double y2 = sc.nextDouble();\n            double z2 = sc.nextDouble();\n\n            Point3D point1 = new Point3D(x1, y1, z1);\n            Point3D point2 = new Point3D(x2, y2, z2);\n\n            System.out.printf(\"Distance between %s and %s is %s.\", point1, point2, Point3D.distanceBetweenPoints(point1, point2));\n\n        } catch (Exception e) {\n            System.out.println(\"Please enter all the components of the vector.\");\n        }\n    }\n\n    /* creating an inner class to define our Vector object */\n    private static class Point3D {\n\n        private final double x;\n        private final double y;\n        private final double z;\n\n        public Point3D(double x, double y, double z) {\n            this.x = x;\n            this.y = y;\n            this.z = z;\n        }\n        /* calculating the distance */\n        public static double distanceBetweenPoints(Point3D a, Point3D b) {\n            return Math.sqrt(\n              Math.pow((a.x - b.x), 2) +\n              Math.pow((a.y - b.y), 2) +\n              Math.pow((a.z - b.z), 2)\n            );\n        }\n\n        public String toString() {\n            return String.format(\"[%s, %s, %s]\", x, y, z);\n        }\n    }\n}",
                "Enter x, y and z components of the first point.\n1 3 6\nEnter x, y and z components of the second point.\n4 3 2\nDistance between [1.0, 3.0, 6.0] and [4.0, 3.0, 2.0] is 5.0.\n"
        ));

        c.add(new Child(
                "Dot Product in 3D",
                "Write a program to calculate dot product of a three dimensional vector.",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n\n            System.out.println(\"Enter x, y and z components of the first vector.\");\n            double vx1 = sc.nextDouble();\n            double vy1 = sc.nextDouble();\n            double vz1 = sc.nextDouble();\n\n            System.out.println(\"Enter x, y and z components of the second vector.\");\n            double vx2 = sc.nextDouble();\n            double vy2 = sc.nextDouble();\n            double vz2 = sc.nextDouble();\n\n            Vector vector1 = new Vector(vx1, vy1, vz1);\n            Vector vector2 = new Vector(vx2, vy2, vz2);\n\n            System.out.printf(\"dot product of %s and %s is %.6f\", vector1, vector2, Vector.dotProduct(vector1, vector2));\n\n        } catch (Exception e) {\n            System.out.println(\"Please enter all the components of the vector.\");\n        }\n    }\n\n    /* creating an inner class to define our Vector object */\n    private static class Vector {\n\n        private final double x;\n        private final double y;\n        private final double z;\n\n        public Vector(double x, double y, double z) {\n            this.x = x;\n            this.y = y;\n            this.z = z;\n        }\n        /* calculating the vector dot product */\n        public static double dotProduct(Vector a, Vector b) {\n            return a.x * b.x + a.y * b.y + a.z * b.z;\n        }\n\n        public String toString() {\n            return String.format(\"[%s, %s, %s]\", x, y, z);\n        }\n    }\n}",
                "Enter x, y and z components of the first vector.\n7 2.5 -3\nEnter x, y and z components of the second vector.\n0.4 -0.9 0.2\ndot product of [7.0, 2.5, -3.0] and [0.4, -0.9, 0.2] is -0.050000"
        ));

        c.add(new Child(
                "Cross Product in 3D",
                "Write a program to calculate the cross product of a three dimensional vector.",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n\n            System.out.println(\"Enter x, y and z components of the first vector.\");\n            double vx1 = sc.nextDouble();\n            double vy1 = sc.nextDouble();\n            double vz1 = sc.nextDouble();\n\n            System.out.println(\"Enter x, y and z components of the second vector.\");\n            double vx2 = sc.nextDouble();\n            double vy2 = sc.nextDouble();\n            double vz2 = sc.nextDouble();\n\n            Vector vector1 = new Vector(vx1, vy1, vz1);\n            Vector vector2 = new Vector(vx2, vy2, vz2);\n\n            Vector crossProduct = crossProduct(vector1, vector2);\n            System.out.printf(\"Cross product of %s and %s is %s\", vector1, vector2, crossProduct);\n\n        } catch (Exception e) {\n            System.out.println(\"Please enter all components of the vector.\");\n        }\n    }\n\n    private static Vector crossProduct(Vector v1, Vector v2) {\n        return new Vector(\n                v1.getY() * v2.getZ() - v1.getZ() * v2.getY(),\n                v1.getZ() * v2.getX() - v1.getX() * v2.getZ(),\n                v1.getX() * v2.getY() - v1.getY() * v2.getX()\n        );\n    }\n    /* creating an inner class to define our Vector object */\n    private static class Vector {\n\n        private final double x;\n        private final double y;\n        private final double z;\n\n        public Vector(double x, double y, double z) {\n            this.x = x;\n            this.y = y;\n            this.z = z;\n        }\n\n        public double getX() {\n            return x;\n        }\n\n        public double getY() {\n            return y;\n        }\n\n        public double getZ() {\n            return z;\n        }\n\n        public String toString() {\n            return String.format(\"[%s, %s, %s]\", x, y, z);\n        }\n    }\n}",
                "Enter x, y and z components of the first vector.\n1 1 1\nEnter x, y and z components of the second vector.\n2 -2 2\nCross product of [1.0, 1.0, 1.0] and [2.0, -2.0, 2.0] is [4.0, 0.0, -4.0]"
        ));

        c.add(new Child(
                "Volume of a Cuboid in 3D",
                "Write a method to calculate the volume of a Cuboid with given length, width and the height.",
                "import java.text.MessageFormat;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (var sc = new Scanner(System.in)) {\n\n            System.out.println(\"Enter length, width and height of the cuboid.\");\n            double length = sc.nextDouble();\n            double width = sc.nextDouble();\n            double height = sc.nextDouble();\n\n            double volume = length * width * height;\n\n            System.out.println(MessageFormat.format(\"Volume of cuboid of length {0} width {1} height {2} is {3}\", length, width, height, volume));\n\n        } catch (Exception e) {\n            System.out.println(\"Please enter all the components of the vector.\");\n        }\n    }\n}",
                "Enter length, width and height of the cuboid.\n6.3 2 5\nVolume of cuboid of length 6.3 width 2 height 5 is 63"
        ));

        return c;
    }

    @NotNull
    private static ArrayList<Child> getNumbers() {
        ArrayList<Child> c = new ArrayList<>();
        c.add(new Child(
                "Abundant Numbers",
                "If the sum of factors of a number is greater than twice that number, it is considered to be Abundant.\n\nFor Example:\n\n12 is an Abundant number.\nFactors of 12 are 1, 2, 3, 4, 6, 12.\nSum is 1 + 2 + 3 + 4 + 6 + 12 = 28 > 2 * 12.",
                "import java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n\n        try(Scanner sc = new Scanner(System.in)) {\n            int inputNum = sc.nextInt();\n\n            List<Integer> factors = getFactors(inputNum);\n            System.out.format(\"The factors of %%d are %%s%%n\", inputNum, factors);\n\n            /* join all the factors with '+' */\n            String sumString = factors.stream()\n                                      .map(String::valueOf)\n                                      .collect(Collectors.joining(\" + \"));\n\n            int sumOfFactors = getSumOfFactors(factors);\n            System.out.format(\"Sum of factors,%%n%%s = %%d%%n\",sumString, sumOfFactors);\n\n            checkIfAbundant(inputNum, factors);\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n    \n    /* method to find all the factors of a given number */\n    private static List<Integer> getFactors(int num) {\n        return IntStream.rangeClosed(1, num)\n                        .filter(i -> num %% i == 0)\n                        .boxed()\n                        .collect(Collectors.toList());\n    }\n\n    /* method to find the sum of all factors */\n    private static int getSumOfFactors(List<Integer> factors) {\n        return factors.stream().reduce(0, Integer::sum);\n    }\n\n    /* method to check whether given number is an Abundant number or not */\n    private static void checkIfAbundant(int inputNum, List<Integer> factors) {\n        if (getSumOfFactors(factors) > 2 * inputNum) {\n            System.out.format(\"Since %%d > 2 * %%d,%%nHence %%d is an Abundant number.\", getSumOfFactors(factors), inputNum, inputNum);\n\n        } else {\n            System.out.format(\"Since %%d <= 2 * %%d,%%nHence %%d is not an Abundant number.\", getSumOfFactors(factors), inputNum, inputNum);\n        }\n    }\n}",
                "Enter a number\n12\n\nThe factors of 12 are [1, 2, 3, 4, 6, 12]\nSum of factors,\n1 + 2 + 3 + 4 + 6 + 12 = 28\nSince 28 > 2 * 12,\nHence 12 is an Abundant number."
        ));

        c.add(new Child(
                "Armstrong Number",
                "An Armstrong Number is an number that is the sum of its own digits each raised to the power of the number of digits.\n\nFor Example:\n\n153 is an Armstrong number, as 1^3 + 5^3 + 3^3 = 153.",
                "import java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Enter a number\");\n\n        try (Scanner sc = new Scanner(System.in)) {\n            int inputNum = sc.nextInt();\n            printIfArmstrong(inputNum);\n            printAllArmstrong(inputNum);\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static int getSum(int inputNum) {\n        String strNum = String.valueOf(inputNum); /* convert number to string */\n\n        return strNum.chars() /* open IntStream */\n                .mapToObj(c -> (char) c) /* get each digit */\n                .map(s -> Math.pow(Character.getNumericValue(s), strNum.length())) /* map each digit powered the length of the number */\n                .mapToInt(Double::intValue) /* get IntStream */\n                .sum(); /* find the sum */\n    }\n\n    private static boolean isArmstrong(int inputNum) {\n        return getSum(inputNum) == inputNum;\n    }\n\n    private static void printIfArmstrong(int inputNum) {\n        String strNum = String.valueOf(inputNum);\n\n        String formatted = strNum.chars()\n                .mapToObj(c -> (char) c)\n                .map(s -> String.format(\"%%s^%%d\", s, strNum.length()))\n                .collect(Collectors.joining(\" + \"));\n\n        if (isArmstrong(inputNum)) {\n            System.out.format(\"Since %%s = %%d,%%nHence %%d is an Armstrong Number.%%n\", formatted, inputNum, inputNum);\n\n        } else {\n            System.out.format(\"Since %%s ≠ %%d,%%nHence %%d is not an Armstrong Number.%%n\", formatted, inputNum, inputNum);\n        }\n    }\n\n    private static void printAllArmstrong(int range) {\n        List<Integer> armstrongNumberList = IntStream.rangeClosed(100, range) /* open IntStream */\n                                                     .filter(Main::isArmstrong) /* check whether a number is Armstrong number or not */\n                                                     .boxed()\n                                                     .collect(Collectors.toList()); /* collect all armstrong number in a list */\n\n        if (armstrongNumberList.size() == 0) {\n            System.out.format(\"There is no Armstrong number upto %%d.%%nThe first Armstrong number is 153.%%n\", range);\n\n        } else {\n            System.out.format(\"All Armstrong numbers upto %%d are %%s\", range, armstrongNumberList);\n        }\n\n    }\n}",
                "Enter a number\n1634\n\nSince 1^4 + 6^4 + 3^4 + 4^4 = 1634,\nHence 1634 is an Armstrong Number.\nAll Armstrong numbers upto 1634 are [153, 370, 371, 407, 1634]"
        ));

        c.add(new Child(
                "Automorphic Number",
                "If the square of a number ends with the number itself, it is considered to be Automorphic.\n\nFor Example:\n\n25 is an Automorphic number, as the square of 25 = 625 (ends with 25).",
                "import java.util.Scanner;\nimport java.util.stream.IntStream;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Enter a number\");\n\n        try (Scanner sc = new Scanner(System.in)) {\n            int inputNum = sc.nextInt();\n            checkIfAutomorphic(inputNum);\n            printAllAutomorphicNumbers(inputNum);\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static boolean isAutomorphic(int inputNum) {\n        String strSquareNum = String.valueOf((int)Math.pow(inputNum, 2));\n        return strSquareNum.endsWith(String.valueOf(inputNum));\n    }\n\n    private static void checkIfAutomorphic(int inputNum) {\n        if (isAutomorphic(inputNum)) {\n            System.out.format(\"%%d is an Automorphic number, as %%d ends with %%d.%%n\", inputNum, (int) Math.pow(inputNum,2), inputNum);\n        } else {\n            System.out.format(\"%%d is not an Automorphic number, as %%d does not ends with %%d.%%n\", inputNum, (int) Math.pow(inputNum,2), inputNum);\n        }\n    }\n\n    private static void printAllAutomorphicNumbers(int inputNum) {\n        System.out.format(\"All Automorphic numbers upto %%d are:%%n\", inputNum);\n        IntStream.rangeClosed(1, inputNum)\n                 .filter(Main::isAutomorphic)\n                 .forEach(System.out::println);\n    }\n}",
                "Enter a number\n625\n\n625 is an Automorphic number, as 390625 ends with 625.\nAll Automorphic numbers upto 625 are:\n1\n5\n6\n25\n76\n376\n625"
        ));

        c.add(new Child(
                "Deficient Numbers",
                "A number is considered Deficient if the sum of its factors is less than twice the number.\n\nFor example:\n\n10 is a Deficient number.\nFactors of 10 are 1, 2, 5, 10.\nSum is 1 + 2 + 5 + 10 = 18 < 2 * 10.",
                "import java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n\n        try (Scanner sc = new Scanner(System.in)) {\n            int inputNum = sc.nextInt();\n\n            List<Integer> factors = getFactors(inputNum);\n            System.out.format(\"The factors of %%d are %%s%%n\", inputNum, factors);\n\n            /* join all the factors with '+' */\n            String sumString = factors.stream()\n                                      .map(String::valueOf)\n                                      .collect(Collectors.joining(\" + \"));\n\n            int sumOfFactors = getSumOfFactors(factors);\n            System.out.format(\"Sum of factors,%%n%%s = %%d%%n\", sumString, sumOfFactors);\n\n            checkIfDeficient(inputNum, factors);\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n\n    /* method to find all the factors of a given number */\n    private static List<Integer> getFactors(int num) {\n        return IntStream.rangeClosed(1, num)\n                .filter(i -> num %% i == 0)\n                .boxed()\n                .collect(Collectors.toList());\n    }\n\n    /* method to find the sum of all factors */\n    private static int getSumOfFactors(List<Integer> factors) {\n        return factors.stream().reduce(0, Integer::sum);\n    }\n\n    /* method to check whether given number is an Abundant number or not */\n    private static void checkIfDeficient(int inputNum, List<Integer> factors) {\n        if (getSumOfFactors(factors) < 2 * inputNum) {\n            System.out.format(\"Since %%d < 2 * %%d,%%nHence %%d is an Deficient number.\", getSumOfFactors(factors), inputNum, inputNum);\n\n        } else {\n            System.out.format(\"Since %%d >= 2 * %%d,%%nHence %%d is not an Deficient number.\", getSumOfFactors(factors), inputNum, inputNum);\n        }\n    }\n}",
                "Enter a number\n10\n\nThe factors of 10 are [1, 2, 5, 10]\nSum of factors,\n1 + 2 + 5 + 10 = 18\nSince 18 < 2 * 10,\nHence 10 is an Deficient number."
        ));

        c.add(new Child(
                "Disarium Numbers",
                "A number is called a Disarium number if the sum of the powers of its digits equals the number itself. The digits are powered to their positions in the number.\n\nFor Example:\n\n135 is a Disarium number because it equals to 1^1 + 3^2 + 5^3 (each digit powered to the position in the number).",
                "import java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Enter a number\");\n\n        try (Scanner sc = new Scanner(System.in)) {\n            int inputNum = sc.nextInt();\n            checkIfDisarium(inputNum);\n            printAllDisariumNumbers(inputNum);\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static int getSum(int inputNum) {\n        String strNum = String.valueOf(inputNum);\n        return IntStream.range(0, strNum.length())\n                .mapToDouble(i -> Math.pow(strNum.charAt(i)-'0', i+1))\n                .boxed()\n                .mapToInt(Double::intValue)\n                .sum();\n    }\n\n    private static boolean isDisarium(int inputNum) {\n        return  getSum(inputNum) == inputNum;\n    }\n\n    private static void checkIfDisarium(int inputNum) {\n        String strNum = String.valueOf(inputNum);\n        String formatted = IntStream.range(0, strNum.length())\n                                    .boxed()\n                                    .map(s -> String.format(\"%%s^%%d\", strNum.charAt(s), s+1))\n                                    .collect(Collectors.joining(\" + \"));\n\n        if (isDisarium(inputNum)) {\n            System.out.format(\"%%d is a Disarium number, as %%s = %%d.%%n\", inputNum, formatted, inputNum);\n        } else {\n            System.out.format(\"%%d is not a Disarium number, as %%s ≠ %%d.%%n\", inputNum, formatted, inputNum);\n        }\n    }\n\n    private static void printAllDisariumNumbers(int inputNum) {\n        System.out.format(\"All Disarium numbers upto %%d are:%%n\", inputNum);\n        IntStream.rangeClosed(0, inputNum)\n                 .filter(Main::isDisarium)\n                 .forEach(System.out::println);\n    }\n}",
                "Enter a number\n135\n\n135 is a Disarium number, as 1^1 + 3^2 + 5^3 = 135.\nAll Disarium numbers upto 135 are:\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n89\n135"
        ));

        c.add(new Child(
                "Emirp Numbers",
                "An Emirp number is a prime number that results in a different prime when its decimal digits are reversed.\n\nFor example:\n\n13 is an Emirp number because both 13 and 31 are prime numbers.",
               "import java.math.BigInteger;\nimport java.util.Scanner;\nimport java.util.stream.IntStream;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Enter a number\");\n\n        try (Scanner sc = new Scanner(System.in)) {\n            int inputNum = sc.nextInt();\n            checkIfEmirp(inputNum);\n            printAllEmirpNumbers(inputNum);\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static boolean isPrime(int num) {\n        return BigInteger.valueOf(num).isProbablePrime(num);\n    }\n\n    private static int getReverse(int num) {\n        return Integer.parseInt(new StringBuilder(String.valueOf(num)).reverse().toString());\n    }\n\n    private static boolean isEmirp(int inputNum) {\n        return isPrime(inputNum) && isPrime(getReverse(inputNum)) && inputNum != getReverse(inputNum);\n    }\n\n    private static void checkIfEmirp(int inputNum) {\n        if (isEmirp(inputNum)) {\n            System.out.format(\"%%d is an Emirp number as, %%d and its reverse %%d are both distinct primes.%%n\", inputNum, inputNum, getReverse(inputNum));\n\n        } else {\n            System.out.format(\"%%d is not an Emirp number.%%n\", inputNum);\n        }\n    }\n\n    private static void printAllEmirpNumbers(int inputNum) {\n        System.out.format(\"All Emirp numbers upto %%d are:%%n\", inputNum);\n        IntStream.rangeClosed(0, inputNum).filter(Main::isEmirp).forEach(System.out::println);\n    }\n}",
              "Enter a number\n79\n\n79 is an Emirp number as, 79 and its reverse 97 are both distinct primes.\nAll Emirp numbers upto 79 are:\n13\n17\n31\n37\n71\n73\n79"
        ));


        c.add(new Child(
                "Gapful Numbers",
                "A Gapful number is a number of at least 3 digits that is divisible by the number formed by the first and last digit of the original number.\n\nFor example:\n\n192 is Gapful because 192 is divisible by 12 (The first and last digit of 192).",
                "import java.util.Scanner;\nimport java.util.stream.IntStream;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Enter a number\");\n\n        try (Scanner sc = new Scanner(System.in)) {\n            int inputNum = sc.nextInt();\n\n            if (inputNum < 100) {\n                System.out.println(\"Input number must be at least of 3 digits.\");\n\n            } else {\n                checkIfGapful(inputNum);\n                printAllGapfulNumbers(inputNum);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static int findFirstAndLastDigits(int inputNum) {\n        String strNum = String.valueOf(inputNum);\n        return Integer.parseInt(strNum.charAt(0) + strNum.substring(strNum.length() - 1));\n    }\n\n    private static boolean isGapful(int inputNum) {\n        return inputNum %% findFirstAndLastDigits(inputNum) == 0;\n    }\n\n    private static void checkIfGapful(int inputNum) {\n        if (isGapful(inputNum)) {\n            System.out.printf(\"%%d is a Gapful number as, its divisible by %%d%%n\", inputNum, findFirstAndLastDigits(inputNum));\n\n        } else {\n            System.out.printf(\"%%d is not a Gapful number as, its not divisible by %%d%%n\", inputNum, findFirstAndLastDigits(inputNum));\n        }\n    }\n\n    private static void printAllGapfulNumbers(int inputNum) {\n        System.out.printf(\"All Gapful numbers upto %%d are :%%n\", inputNum);\n        \n        IntStream.rangeClosed(100, inputNum)\n                .filter(Main::isGapful)\n                .forEach(System.out::println);\n    }\n}",
                "Enter a number\n121\n\n121 is a Gapful number as, its divisible by 11\nAll Gapful numbers upto 121 are :\n100\n105\n108\n110\n120\n121"
        ));

        c.add(new Child(
                "Harshad Numbers",
                "A Harshad number or Niven number is a number of at least two digits that is divisible by the sum of its digits.\n\nFor example:\n\n18 is a Harshad number because it is divisible by the sum of its digits: 18 / (1 + 8) = 2",
                "import java.util.Scanner;\nimport java.util.stream.IntStream;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Enter a number\");\n\n        try (Scanner sc = new Scanner(System.in)) {\n            int inputNum = sc.nextInt();\n\n            if (inputNum < 10) {\n                System.out.println(\"Input number must be at least of 2 digits.\");\n\n            } else {\n                checkIfHarshad(inputNum);\n                printAllHarshadNumbers(inputNum);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static int getSumOfDigits(int inputNum) {\n        return String.valueOf(inputNum).chars().map(Character::getNumericValue).sum();\n    }\n\n    private static boolean isHarshad(int inputNum) {\n        return inputNum %% getSumOfDigits(inputNum) == 0;\n    }\n\n    private static void checkIfHarshad(int inputNum) {\n        if (isHarshad(inputNum)) {\n            System.out.printf(\"%%d is a Harshad number as, its divisible by its sum of digits %%d%%n\", inputNum, getSumOfDigits(inputNum));\n\n        } else {\n            System.out.printf(\"%%d is not a Harshad number as, its not divisible by its sum of digits %%d%%n\", inputNum, getSumOfDigits(inputNum));\n        }\n    }\n\n    private static void printAllHarshadNumbers(int inputNum) {\n        System.out.printf(\"All Harshad numbers upto %%d are :%%n\", inputNum);\n\n        IntStream.rangeClosed(10, inputNum)\n                .filter(Main::isHarshad)\n                .forEach(System.out::println);\n    }\n}",
                "Enter a number\n18\n\n18 is a Harshad number as, its divisible by its sum of digits 9\nAll Harshad numbers upto 18 are :\n10\n12\n18"
        ));

        c.add(new Child(
                "Happy Numbers",
                "If the repeated sum of squares of the digits of a number is equal to 1, it is considered to be a Happy number.\n\nFor example:\n\n23 is a Happy number, as\n2^2 + 3^2 = 13\n1^2 + 3^2 = 10\n1^2 + 0^2 = 1.",
                "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    private static boolean flag = true;\n    private static String format;\n\n    public static void main(String[] args) {\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            int inputNum = sc.nextInt();\n\n            if (inputNum < 1) {\n                System.out.println(\"Please enter a number greater than 1.\");\n\n            } else {\n                ArrayList<Integer> allHappyNumbers = new ArrayList<>();\n\n                for(int i = 1; i < inputNum; i++) {\n                    if (isHappy(i)) {\n                        allHappyNumbers.add(i);\n                    }\n                }\n                format = \"\";\n                if (flag = isHappy(inputNum)) {\n                    allHappyNumbers.add(inputNum);\n                }\n                checkIfHappy(inputNum);\n\n                System.out.printf(\"Sum of squares : %%n%%s%%n\", format);\n                System.out.printf(\"All Happy numbers between 1 and %%d are :%%n%%s%%n\", inputNum, allHappyNumbers);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static boolean isHappy(int inputNum) {\n        if (inputNum == 0) {return false;}\n        int sum;\n        while (inputNum != 1) {\n            sum = 0;\n            while (inputNum >= 1) {\n                sum += Math.pow(inputNum %% 10, 2);\n                format += inputNum %% 10 + \"^2 + \";\n                inputNum /= 10;\n            }\n            format = format.substring(0, format.length() - 2);\n            format += \" = \" + sum + \"\\n\";\n\n            if ((inputNum = sum) == 4) return false;\n        }\n        return true;\n    }\n\n    private static void checkIfHappy(int inputNum) {\n        System.out.printf(\"%%d is a \", inputNum);\n        if (!flag) {\n            System.out.print(\"Un\");\n        }\n        System.out.println(\"Happy number.\");\n    }\n}",
                "Enter a number\n28\n\n28 is a Happy number.\nSum of squares : \n8^2 + 2^2  = 68\n8^2 + 6^2  = 100\n0^2 + 0^2 + 1^2  = 1\n\nAll Happy numbers between 1 and 28 are :\n[1, 7, 10, 13, 19, 23, 28]"
        ));

        c.add(new Child(
                "Leyland Numbers",
                "A Leyland number is a number which can be expressed as a^b + b^a where a and b are integers greater than 1.\n\nFor example:\n\n17 is a Leyland number as, 17 = 2^3 + 3^2.",
                "import java.text.MessageFormat;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            long inputNum = sc.nextLong();\n\n            if (inputNum < 1) {\n                System.out.println(\"Please enter a number greater than 1.\");\n\n            } else {\n                checkIfLeyland(inputNum);\n                printAllLeylandNumbers(inputNum);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static boolean isLeyland(long a, long b, long n) {\n        return Math.pow(a, b) + Math.pow(b, a) == n;\n    }\n\n    private static void checkIfLeyland(long inputNum) {\n        ArrayList<Long> leyland = new ArrayList<>();\n\n        for (long i = 2; i < Math.sqrt(inputNum); i++) {\n            for (long j = i; j < Math.sqrt(inputNum); j++) {\n                if (isLeyland(i, j, inputNum)) {\n                    leyland.add(i);\n                    leyland.add(j);\n                }\n            }\n        }\n\n        if (leyland.size() == 0) {\n            System.out.printf(\"%%d is not a Leyland number.%%n\", inputNum);\n\n        } else {\n            System.out.printf(\"%%d is a Leyland number as, \", inputNum);\n            System.out.println(MessageFormat.format(\"{0} = {1}^{2} + {2}^{1}\", inputNum, leyland.get(0), leyland.get(1)));\n        }\n    }\n\n    private static void printAllLeylandNumbers(long inputNum) {\n\n        ArrayList<Long> leyland = new ArrayList<>();\n        for (long i = 2; i < Math.sqrt(inputNum); i++) {\n            for (long j = i; j < Math.sqrt(inputNum); j++) {\n                leyland.add((long) (Math.pow(i, j) + Math.pow(j, i)));\n            }\n        }\n        Collections.sort(leyland);\n        List<Long> allLeyland = leyland.stream().takeWhile(n -> n <= inputNum).collect(Collectors.toList());\n        System.out.printf(\"All Leyland numbers upto %d are :%n%s%n\", inputNum, allLeyland);\n    }\n}",
                "Enter a number\n945\n\n945 is a Leyland number as, 945 = 3^6 + 6^3\nAll Leyland numbers upto 945 are :\n[8, 17, 32, 54, 57, 100, 145, 177, 320, 368, 512, 593, 945]"
        ));

        c.add(new Child(
                "Palindromic Numbers",
                "A Palindromic number is a number of at least two digits that is the same when written forwards or backwards.\n\nFor example:\n\n404 is a Palindromic number.",
                "import java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.LongStream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            long inputNum = sc.nextLong();\n\n            if (inputNum < 10) {\n                System.out.println(\"Please enter a number greater than 10.\");\n\n            } else {\n                checkIfPalindromic(inputNum);\n                printAllPalindromicNumbers(inputNum);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static boolean isPalindrome(long inputNum) {\n        String strNum = String.valueOf(inputNum);\n        return strNum.equals(new StringBuilder(strNum).reverse().toString());\n    }\n\n    private static void checkIfPalindromic(long inputNum) {\n        if (isPalindrome(inputNum)) {\n            System.out.printf(\"%%d is a Palindromic number.%%n\", inputNum);\n\n        } else {\n            System.out.printf(\"%%d is not a Palindromic number.%%n\", inputNum);\n        }\n    }\n\n    private static void printAllPalindromicNumbers(long inputNum) {\n        List<Long> allPalindromes = LongStream.rangeClosed(10, inputNum)\n                                              .filter(Main::isPalindrome)\n                                              .boxed()\n                                              .collect(Collectors.toList());\n        System.out.printf(\"All Palindromic numbers upto %%d are %%n%%s%%n\", inputNum, allPalindromes);\n    }\n}",
                "Enter a number\n404\n404 is a Palindromic number.\nAll Palindromic numbers upto 404 are \n[11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404]\n"
        ));

        c.add(new Child(
                "Perfect Numbers",
                "A Perfect number is a positive integer that is equal to the sum of its proper positive divisors, that is, the sum of its positive divisors excluding the number itself.\n\nFor example:\n\n6 is a Perfect number as, the proper divisors of 6 are 1, 2 and 3, and 1 + 2 + 3 = 6.",
                "import java.text.MessageFormat;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.LongStream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            long inputNum = sc.nextLong();\n\n            if (inputNum < 1) {\n                System.out.println(\"Please enter a number greater than 0.\");\n\n            } else {\n                checkIfPerfect(inputNum);\n                printAllPerfectNumbers(inputNum);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    // method to find the factors of the given number\n    private static List<Long> getFactors(long num) {\n        return LongStream.rangeClosed(1, num/2).filter(l -> num %% l == 0).boxed().collect(Collectors.toList());\n    }\n\n    // method to find the sum of all the factors\n    private static long getSumOfFactors(List<Long> factors) {\n        return factors.stream().reduce(0L, Long::sum);\n    }\n\n    private static boolean isPerfect(long inputNum) {\n        return inputNum == getSumOfFactors(getFactors(inputNum));\n    }\n\n    private static void checkIfPerfect(long inputNum) {\n        String formatted = getFactors(inputNum).stream().map(String::valueOf).collect(Collectors.joining(\" + \"));\n        List<Long> factors = getFactors(inputNum);\n        if (isPerfect(inputNum)) {\n            System.out.println(MessageFormat.format(\"{0} is a Perfect number as, the proper divisors of {0} are {1}, and {2} = {3}\\n\", inputNum, factors, formatted, getSumOfFactors(factors)));\n\n        } else {\n            System.out.printf(\"%d is not a Perfect number.%n\", inputNum);\n        }\n    }\n\n    private static void printAllPerfectNumbers(long inputNum) {\n        List<Long> allPerfectNumbers = LongStream.rangeClosed(1, inputNum).filter(Main::isPerfect).boxed().collect(Collectors.toList());\n        System.out.printf(\"All Perfect numbers upto %d are :%n%s%n\", inputNum, allPerfectNumbers);\n    }\n}",
                "Enter a number\n8128\n8,128 is a Perfect number as, the proper divisors of 8,128 are :\n[1, 2, 4, 8, 16, 32, 64, 127, 254, 508, 1016, 2032, 4064],\nand\n 1 + 2 + 4 + 8 + 16 + 32 + 64 + 127 + 254 + 508 + 1016 + 2032 + 4064 = 8,128\n\nAll Perfect numbers upto 8128 are :\n[6, 28, 496, 8128]"
        ));

        c.add(new Child(
                "Permutable Prime",
                "A Permutable prime is a prime number of two or more digits that remains prime with every possible rearrangement of the digits.\n\nFor example:\n\n337 is a Permutable prime as 337, 373, 733 are all primes.",
                "import java.text.MessageFormat;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport java.util.stream.LongStream;\nimport java.util.stream.Stream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            long inputNum = sc.nextLong();\n\n            if (inputNum < 10) {\n                System.out.println(\"Please enter a number greater than 10.\");\n\n            } else {\n                checkIfPermutablePrime(inputNum);\n                printAllPermutablePrime(inputNum);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    /* method to generate all the permutations */\n    private static Stream<String> permutations(String num) {\n        if (num.isEmpty()) return Stream.of(\"\");\n        return IntStream.range(0, num.length())\n                .boxed()\n                .flatMap(i ->\n                        permutations(num.substring(0, i) + num.substring(i + 1))\n                                .map(j -> num.charAt(i) + j)\n                );\n    }\n\n    /* method to get only distinct permutations */\n    private static List<Long> getDistinctPermutations(long num) {\n        String strNum = String.valueOf(num);\n        Stream<String> permutations = permutations(strNum);\n        return permutations.mapToLong(Long::parseLong).distinct().boxed().collect(Collectors.toList());\n    }\n\n    /* method to check if a number is prime or not */\n    private static boolean isPrime(long num) {\n        return LongStream.rangeClosed(2, (long) Math.sqrt(num)).noneMatch(p -> num % p == 0);\n    }\n\n    /* method to check if all permutations are prime or not */\n    private static boolean isPermutablePrime(long num) {\n        return getDistinctPermutations(num).stream().allMatch(Main::isPrime);\n    }\n\n    private static void checkIfPermutablePrime(long inputNum) {\n        if (isPermutablePrime(inputNum)) {\n            System.out.println(MessageFormat.format(\"{0} is a Permutable prime as all arrangement of {0} {1} are prime numbers.\", inputNum, getDistinctPermutations(inputNum)));\n\n        } else {\n            System.out.printf(\"%d is not a Permutable prime number.%n\", inputNum);\n        }\n    }\n\n    private static void printAllPermutablePrime(long inputNum) {\n        List<Long> allPermutablePrimes = LongStream.rangeClosed(10, inputNum).filter(Main::isPermutablePrime).boxed().collect(Collectors.toList());\n        System.out.printf(\"All permutable prime numbers upto %d are :%n%s%n.\", inputNum, allPermutablePrimes);\n    }\n}",
                "Enter a number\n337\n337 is a Permutable prime as all arrangement of 337 [337, 373, 733] are prime numbers.\nAll permutable prime numbers upto 337 are :\n[11, 13, 17, 31, 37, 71, 73, 79, 97, 113, 131, 199, 311, 337]\n"
        ));


        c.add(new Child(
                "Prime Numbers",
                "A Prime number is a number that is divisible only by itself and 1.\n\nFor example:\n\n[2, 3, 5, 7, 11,..] is the sequence of prime numbers.",
                "import java.math.BigInteger;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            long inputNum = sc.nextLong();\n\n            if (inputNum < 2) {\n                System.out.println(\"Please enter a number greater than 2.\");\n\n            } else {\n                printAllPrimeNumbers(inputNum);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static void printAllPrimeNumbers(long inputNum) {\n        List<BigInteger> allPrimes = Stream.iterate(BigInteger.TWO, BigInteger::nextProbablePrime).limit(inputNum).collect(Collectors.toList());\n        System.out.printf(\"First %d prime numbers are :%n%s%n\", inputNum, allPrimes);\n    }\n}",
                "Enter a number\n20\nFirst 20 prime numbers are :\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n"
        ));


        c.add(new Child(
                "Semi-prime Numbers",
                "A Semi-prime number is a natural number that is the product of exactly two (not necessarily distinct) prime numbers.\n\nFor example:\n\n57 is a Semi-prime number as, 57 = 3 * 19.",
                "import java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.LongStream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            long inputNum = sc.nextLong();\n\n            if (inputNum < 1) {\n                System.out.println(\"Please enter a number greater than 1.\");\n\n            } else {\n                checkIfSemiPrime(inputNum);\n                printAllSemiPrimeNumbers(inputNum);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static boolean isPrime(long num) {\n        return LongStream.rangeClosed(2, (long)Math.sqrt(num)).allMatch(p -> num %% p != 0);\n    }\n\n    private static long getPrimeDivider(long num) {\n        for (long i = 2; i <= num/2; i++) {\n            if (num %% i == 0 && isPrime(i)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private static boolean isSemiPrime(long inputNum) {\n        long divider = getPrimeDivider(inputNum);\n        if (divider == -1) {\n            return false;\n        }\n        return isPrime(inputNum / divider);\n    }\n\n    private static void checkIfSemiPrime(long inputNum) {\n        if (isSemiPrime(inputNum)) {\n            System.out.printf(\"%%d is a Semi-prime number.%%n\", inputNum);\n        } else {\n            System.out.printf(\"%%d is not a Semi-prime number.%%n\", inputNum);\n        }\n    }\n\n    private static void printAllSemiPrimeNumbers(long inputNum) {\n        List<Long> allSemiPrimes = LongStream.rangeClosed(2, inputNum).filter(Main::isSemiPrime).boxed().collect(Collectors.toList());\n        System.out.printf(\"All Semi-prime numbers upto %%d are :%%n%%s%%n\", inputNum, allSemiPrimes);\n    }\n}",
                "Enter a number\n55\n55 is a Semi-prime number.\nAll Semi-prime numbers upto 55 are :\n[4, 6, 9, 10, 14, 15, 21, 22, 25, 26, 33, 34, 35, 38, 39, 46, 49, 51, 55]"
        ));


        c.add(new Child(
                "Smith Number",
                "Smith number is a composite number whose sum of digits is equal to the sum of digits of its prime factors obtained as a result of prime factorization (excluding 1).\nThe first few Smith numbers are 4, 22, 27, 58, 85, 94, 121..",
                "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.LongStream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            long inputNum = sc.nextLong();\n\n            if (inputNum < 1) {\n                System.out.println(\"Please enter a number greater than 1.\");\n\n            } else {\n                checkIfSmith(inputNum);\n                printAllSmithNumbers(inputNum);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static boolean isSmithNumber(long num) {\n        return getSumOfDigits(num) == getPrimeFactors(num).stream().reduce(0L, (a, b) -> a + getSumOfDigits(b));\n    }\n\n    private static long getSumOfDigits(long num) {\n        return String.valueOf(num).chars().mapToLong(Character::getNumericValue).sum();\n    }\n\n    private static List<Long> getPrimeFactors(long num) {\n        ArrayList<Long> primeFactors = new ArrayList<>();\n        for (long i = 2; i < Math.sqrt(num); i++) {\n            while (num % i == 0) {\n                primeFactors.add(i);\n                num /= i;\n            }\n        }\n        if (num > 1) primeFactors.add(num);\n        return primeFactors;\n    }\n\n    private static void checkIfSmith(long inputNum) {\n        if (isSmithNumber(inputNum)) {\n            System.out.printf(\"%d is a Smith number.%n\", inputNum);\n        } else {\n            System.out.printf(\"%d is not a Smith number.%n\", inputNum);\n        }\n    }\n\n    private static void printAllSmithNumbers(long inputNum) {\n        List<Long> allSmithNumbers = LongStream.rangeClosed(1, inputNum).filter(Main::isSmithNumber).boxed().collect(Collectors.toList());\n        System.out.printf(\"All Smith numbers upto %d are :%n%s%n\", inputNum, allSmithNumbers);\n    }\n}",
                "Enter a number\n27\n27 is a Smith number.\nAll Smith numbers upto 27 are :\n[2, 3, 4, 5, 7, 9, 11, 13, 17, 19, 22, 23, 25, 27]"
        ));


        c.add(new Child(
                "Spy Numbers",
                "A number is called a Spy number, if the sum and the product of its digits are equal.\n\nFor example:\n\n123 is a Spy number, as the sum of its digits is 6 (1+2+3) which is equal to the product of its digits: 6 (1*2*3).",
                String.format("import java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.LongStream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            long inputNum = sc.nextLong();\n\n            if (inputNum < 10) {\n                System.out.println(\"Please enter a number greater than 10.\");\n\n            } else {\n                checkIfSpy(inputNum);\n                printAllSpyNumbers(inputNum);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static List<Long> getDigits(long num) {\n        return String.valueOf(num)\n                .chars()\n                .mapToLong(Character::getNumericValue)\n                .boxed()\n                .collect(Collectors.toList());\n    }\n\n    private static long getSumOfDigits(long num) {\n        return getDigits(num).stream().reduce(0L, Long::sum);\n    }\n\n    private static long getProductOfDigits(long num) {\n        return getDigits(num).stream().reduce(1L, (a, b) -> a * b);\n    }\n\n    private static boolean isSpy(long inputNum) {\n        return getSumOfDigits(inputNum) == getProductOfDigits(inputNum);\n    }\n\n    private static String formatWithDelimiter(long inputNum, String delimiter) {\n        return getDigits(inputNum).stream().map(String::valueOf).collect(Collectors.joining(delimiter));\n    }\n\n    private static void checkIfSpy(long inputNum) {\n        String formatSum = formatWithDelimiter(inputNum, \" + \");\n        String formatProduct = formatWithDelimiter(inputNum, \" * \");\n\n        if (isSpy(inputNum)) {\n            System.out.printf(\"%%d is a Spy number, as the sum of its digits is %%d (%%s) which is equal to the product of its digits %%d (%%s).%%n\", inputNum, getSumOfDigits(inputNum), formatSum, getProductOfDigits(inputNum), formatProduct);\n\n        } else {\n            System.out.printf(\"%%d is not a Spy Number.%%n\", inputNum);\n        }\n    }\n\n    private static void printAllSpyNumbers(long inputNum) {\n        List<Long> allSpyNumber = LongStream.rangeClosed(10, inputNum).filter(Main::isSpy).boxed().collect(Collectors.toList());\n        System.out.printf(\"All Spy numbers upto %%d are :%%n%%s%%n\", inputNum, allSpyNumber);\n    }\n}"),
                "Enter a number\n321\n321 is a Spy number, as the sum of its digits is 6 (3 + 2 + 1) which is equal to the product of its digits 6 (3 * 2 * 1).\nAll Spy numbers upto 321 are :\n[22, 123, 132, 213, 231, 312, 321]"
        ));


        c.add(new Child(
                "Trimorphic Numbers",
                "A Trimorphic number is a number whose cube ends in the number itself.\n\nFor example:\n\n24 is a Trimorphic number as, 24^3 = 13824 (ends with 24).",
                String.format("import java.text.MessageFormat;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.LongStream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            long inputNum = sc.nextLong();\n\n            if (inputNum < 1) {\n                System.out.println(\"Please enter a number greater than 0.\");\n\n            } else {\n                checkIfTrimorphic(inputNum);\n                printAllTrimorphicNumbers(inputNum);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static boolean isTrimorphic(long inputNum) {\n        String strNum = String.valueOf(inputNum);\n        return String.valueOf((int) Math.pow(inputNum, 3)).endsWith(strNum);\n    }\n\n    private static void checkIfTrimorphic(long inputNum) {\n        if (isTrimorphic(inputNum)) {\n            System.out.print(MessageFormat.format(\"{0} is a Trimorphic number as {1} ends with {0}.%%n\", inputNum, (int) Math.pow(inputNum, 3)));\n        } else {\n            System.out.printf(\"%%d is not a Trimorphic number.%%n\", inputNum);\n        }\n    }\n\n    private static void printAllTrimorphicNumbers(long inputNum) {\n        List<Long> allTrimorphic = LongStream.rangeClosed(1, inputNum).filter(Main::isTrimorphic).boxed().collect(Collectors.toList());\n        System.out.printf(\"All Trimorphic numbers upto %%d are :%%n%%s%%n\", inputNum, allTrimorphic);\n    }\n}"),
                "Enter a number\n24\n24 is a Trimorphic number as 13,824 ends with 24.\nAll Trimorphic numbers upto 24 are :\n[1, 4, 5, 6, 9, 24]"
        ));


        c.add(new Child(
                "Wilson Primes",
                "A prime number is called Wilson prime if ((P-1)! + 1) / (P * P) gives a whole number.\n\nFor example:\n\n5 is a Wilson prime number.",
                String.format("import java.math.BigInteger;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\nimport java.util.stream.LongStream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        System.out.println(\"Enter a number\");\n        try (Scanner sc = new Scanner(System.in)) {\n            long inputNum = sc.nextLong();\n\n            if (inputNum < 1) {\n                System.out.println(\"Please enter a number greater than 1.\");\n\n            } else {\n                checkIfWilsonPrime(inputNum);\n                printAllWilsonPrimeNumbers(inputNum);\n            }\n\n        } catch (Exception e) {\n            System.err.println(\"Please enter a valid number.\");\n        }\n    }\n\n    private static boolean isWilsonPrime(long num) {\n        if (num == 1 || num == 0) return false;\n\n        return LongStream.range(2, num)\n                         .mapToObj(BigInteger::valueOf)\n                         .reduce(BigInteger.ONE, BigInteger::multiply)\n                         .add(BigInteger.ONE)\n                         .divideAndRemainder(BigInteger.valueOf(num * num))[1]\n                         .intValue() == 0;\n    }\n\n    private static void checkIfWilsonPrime(long inputNum) {\n        if (isWilsonPrime(inputNum)) {\n            System.out.printf(\"%%d is a Wilson Prime number.%%n\", inputNum);\n        } else {\n            System.out.printf(\"%%d is not a Wilson Prime number.%%n\", inputNum);\n        }\n    }\n\n    private static void printAllWilsonPrimeNumbers(long inputNum) {\n        List<Long> allWilsonPrime = LongStream.rangeClosed(1, inputNum).filter(Main::isWilsonPrime).boxed().collect(Collectors.toList());\n        System.out.printf(\"All Wilson Prime numbers upto %%d are :%%n%%s%%n\", inputNum, allWilsonPrime);\n    }\n}"),
                "Enter a number\n563\n563 is a Wilson Prime number.\nAll Wilson Prime numbers upto 563 are :\n[5, 13, 563]\n"
        ));

        return c;
    }

    @NotNull
    private static ArrayList<Child> getFundamentals() {
        ArrayList<Child> c = new ArrayList<>();
        c.add(new Child(
                "Hello World",
                "Write a program to print Hello World! on console.",
                "public class Main {\n" +
                      "   public static void main(String[] args) {\n" +
                      "       System.out.println(\"Hello World!\");\n" +
                      "   }\n" +
                      "}",
                "Hello World"));

        c.add(new Child(
                "Print 1 to 100",
                "Write a program to print 1 – 100 on console.",
                "import java util.stream.IntStream;\n" +
                      "public class Main {\n" +
                      "   public static void main(String[] args) {\n\n" +
                      "       IntStream.rangeClosed(1, 100)\n" +
                      "                .forEach(System.out::println);\n" +
                      "   }\n" +
                      "}",
                "1\n2\n3\n4\n.\n.\n.\n100"
        ));

        c.add(new Child(
                "Check if a number is Odd or Even",
                "Write a program to check if a number is odd or even.",

                "import java util.Scanner;\n" +
                        "public class Main {\n" +
                        "   public static void main(String[] args) {\n\n" +
                        "       Scanner sc = new Scanner(System.in);\n\n" +
                        "        System.out.println(\"Enter a number.\");\n" +
                        "        int input = sc.nextInt();\n" +
                        "        sc.close()\n\n" +
                        "        if (input % 2 == 0) {\n" +
                        "            System.out.printf(\"Entered number %d is an Even number.%n\", input);\n\n" +
                        "        } else {\n" +
                        "            System.out.printf(\"Entered number %d is not an Even number.%n\", input);\n" +
                        "        }\n" +
                        "   }\n" +
                        "}",

                "Enter a number.\n" +
                        "8\n" +
                        "Entered number 8 is an Even number.\n\n" +
                        "Enter a number.\n" +
                        "15\n" +
                        "Entered number 15 is an Odd number."
        ));

        c.add(new Child(
                "Print all Even numbers till 'N'",
                "Write a program to print all even numbers till a positive number entered by user.",

                "import java.util.Scanner;\n" +
                        "import java.util.stream.IntStream;\n\n" +
                        "public class Main {\n" +
                        "    public static void main(String[] args) {\n\n" +
                        "        Scanner sc = new Scanner(System.in);\n\n" +
                        "        System.out.println(\"Enter a number.\");\n" +
                        "        int input = sc.nextInt();\n" +
                        "        sc.close()\n\n" +
                        "        System.out.printf(\"All even numbers upto %d are :%n\", input);\n" +
                        "        IntStream.rangeClosed(1, input)\n" +
                        "                 .filter(num -> num % 2 == 0)\n" +
                        "                 .forEach(System.out::println);\n" +
                        "    }\n" +
                        "}\n",

                "Enter a number.\n15\nAll even numbers up to 15 are -\n2\n4\n6\n8\n10\n12\n14\n"
        ));

        c.add(new Child(
                "Generate range of Integers",
                "Implement a method to generate a range of integers given the minimum value, maximum value and step.",

                "import java.util.Scanner;\n" +
                        "import java.util.stream.IntStream;\n\n" +
                        "public class Main {\n" +
                        "    public static void main(String[] args) {\n\n" +
                        "        Scanner sc = new Scanner(System.in);\n\n" +
                        "        System.out.println(\"Enter minimum value.\");\n" +
                        "        int min = sc.nextInt();\n\n" +
                        "        System.out.println(\"Enter maximum value.\");\n" +
                        "        int max = sc.nextInt();\n\n" +
                        "        System.out.println(\"Enter step.\");\n" +
                        "        int step = sc.nextInt();\n" +
                        "        sc.close()\n\n" +
                        "        System.out.println(\"All numbers in given range are : \");\n" +
                        "        IntStream.iterate(min, i -> i <= max, i -> i + step)\n" +
                        "                 .forEach(System.out::println);\n" +
                        "    }\n" +
                        "}",

                "Enter minimum value.\n" +
                        "1\n" +
                        "Enter maximum value.\n" +
                        "10\n" +
                        "Enter step.\n" +
                        "3\n" +
                        "All numbers in given range are :\n" +
                        "1\n4\n7\n10"
        ));

        c.add(new Child(
                "Print A-Z",
                "Print all the capital letters of the english alphabet.",

                "import java.util.stream.IntStream;\n\n" +
                        "public class Main {\n" +
                        "    public static void main(String[] args) {\n\n" +
                        "        IntStream.rangeClosed('A', 'Z')\n" +
                        "                 .mapToObj(Character::toString)\n" +
                        "                 .forEach(System.out::println);\n" +
                        "    }\n" +
                        "}",

                "A\nB\nC\n.\n.\n.\nY\nZ"
        ));

        c.add(new Child(
                "Print a-z",
                "Print all the small letters of the english alphabet.",

                "import java.util.stream.IntStream;\n\n" +
                        "public class Main {\n" +
                        "    public static void main(String[] args) {\n\n" +
                        "        IntStream.rangeClosed('a', 'z')\n" +
                        "                 .mapToObj(Character::toString)\n" +
                        "                 .forEach(System.out::println);\n" +
                        "    }\n" +
                        "}",

                "a\nb\nc\n.\n.\n.\ny\nz"
        ));

        c.add(new Child(
                "Swap two numbers using 3rd variable",
                "Swap two numbers using a 3rd variable.",

                "public class Main {\n" +
                        "    public static void main(String[] args) {\n\n" +
                        "        int a = 100;\n" +
                        "        int b = 200;\n" +
                        "        int temp;\n\n" +
                        "        temp = a;\n" +
                        "        a = b;\n" +
                        "        b = temp;\n\n" +
                        "        System.out.println(\"a = \" + a + \"\\nb = \" + b);\n" +
                        "    }\n" +
                        "}",

                "a = 200\nb = 100"
        ));

        c.add(new Child(
                "Swap two numbers without using 3rd variable",
                "Swap two numbers without using a 3rd variable.",

                "public class Main {\n" +
                        "    public static void main(String[] args) {\n\n" +
                        "        int a = 100;\n" +
                        "        int b = 200;\n\n" +
                        "        a = a + b;\n" +
                        "        b = a - b;\n" +
                        "        a = a - b;\n\n" +
                        "        System.out.println(\"a = \" + a + \"\\nb = \" + b);\n" +
                        "    }\n" +
                        "}",

                "a = 200\nb = 100"
        ));

        c.add(new Child(
                "Max and Min numbers",
                "Given some numbers find the maximum and minimum number among them.",
                "import java.util.stream.IntStream;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        int a = 100;\n        int b = 200;\n        int c = 400;\n        int d = 50;\n\n        int maxValue = IntStream.of(a, b, c, d).max().getAsInt();\n        System.out.println(\"Max value = \" + maxValue);\n\n        int minValue = IntStream.of(a, b, c, d).min().getAsInt();\n        System.out.println(\"Min value = \" + minValue);\n    }\n}",
                "Max value = 400\nMin value = 50"
        ));

        c.add(new Child(
                "Calculate BMI",
                "Write a program to calculate Body Mass Index (bmi = weight/height^2)",
                "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n\n        try (Scanner sc = new Scanner(System.in)) {\n\n            System.out.println(\"Enter your weight in kg.\");\n            double weight = sc.nextDouble();\n\n            System.out.println(\"Enter your height in meters.\");\n            double height = sc.nextDouble();\n\n            System.out.println(calculateBMI(weight, height));\n\n        } catch (ArithmeticException ae) {\n            System.err.println(\"Height can not be zero.\");\n        }\n    }\n\n    private static String calculateBMI(double weight, double height) {\n        double bmi = weight / Math.pow(height, 2);\n\n        if (bmi <= 18.5)\n            return \"You are Underweight.\";\n        else if (bmi <= 25)\n            return \"Your weight is Normal.\";\n        else if (bmi <= 30)\n            return \"You are Overweight\";\n        else\n            return \"You are Obese\";\n    }\n}",
                "Enter your weight in kg.\n62\nEnter your height in meters.\n1.8\nYour weight is Normal."
        ));

        c.add(new Child(
                "Calculate Average",
                "Write a program to calculate average of given numbers.",
                "import java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n\n       int[] array = {12, 37, 32, 92, 29, 88};\n       double average = Arrays.stream(array).average().orElse(0);\n       System.out.println(\"Average of all numbers in given array is \" + average);\n\n    }\n}",
                "Average of all numbers in given array is 48.333333333333336"
        ));

        return c;
    }
}
